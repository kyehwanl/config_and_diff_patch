
 @@ perl one-liner @@

----------------------------------------------------------------------------------------
Usage: perl [switches] [--] [programfile] [arguments]
  -0[octal]         specify record separator (\0, if no argument)
  -a                autosplit mode with -n or -p (splits $_ into @F)
  -C[number/list]   enables the listed Unicode features
  -c                check syntax only (runs BEGIN and CHECK blocks)
  -d[:debugger]     run program under debugger
  -D[number/list]   set debugging flags (argument is a bit mask or alphabets)
  -e program        one line of program (several -e's allowed, omit programfile)
  -E program        like -e, but enables all optional features
  -f                don't do $sitelib/sitecustomize.pl at startup
  -F/pattern/       split() pattern for -a switch (//'s are optional)
  -i[extension]     edit <> files in place (makes backup if extension supplied)
  -Idirectory       specify @INC/#include directory (several -I's allowed)
  -l[octal]         enable line ending processing, specifies line terminator
  -[mM][-]module    execute "use/no module..." before executing program
  -n                assume "while (<>) { ... }" loop around program
  -p                assume loop like -n but print line also, like sed
  -s                enable rudimentary parsing for switches after programfile
  -S                look for programfile using PATH environment variable
  -t                enable tainting warnings
  -T                enable tainting checks
  -u                dump core after parsing program
  -U                allow unsafe operations
  -v                print version, subversion (includes VERY IMPORTANT perl info)
  -V[:variable]     print configuration summary (or a single Config.pm variable)
  -w                enable many useful warnings (RECOMMENDED)
  -W                enable all warnings
  -x[directory]     strip off text before #!perl line and perhaps cd to directory
  -X                disable all warnings
----------------------------------------------------------------------------------------

* <> : read from <STDIN> and put the result to $_
* -l basically removes the newline characters at the end and appends it back at the end of line  when printing


MY APPLICATEION
=================

1. catch a value in forms of "debug-type = 7;"
    perl -lne '/debug-type.*(\d)/ && print $1' srxcryptoapi.conf

2. extract file name from 'git st'
    git st | perl -alne 'print $F[1] if $.>5 && $.<8'
    git st | perl -alne '/.*\/(.*)/ && print $1 if $.>5 && $. <8'

    * in case to extract file name only, add the following at the end of the above
    (1) with sed    :  "| sed 's/.*\/\(.*\)/\1/'"
    (2) with regex  :  "| perl -nle '/.*\/(.*)/ && print $1'"

3. how to use shell variables
    i=10; export i; sudo tail -$i qsrx_validate_stat.txt | perl -alne 'print $ENV{i}'





FILE SPACING & LINE NUMBERING
------------------------------

1. perl -pi.bak -e 's/you/me/g' file
   backup(file.bak) first, then substitution you with me for all cases(-p), in-place(-i)


2. line numbering
    perl -ne 'print "$. $_"' file  or
    perl -pe '$_ = "$. $_"' file

    perl -ne 'print "$. $_" if $a{$_}++' file --> numbers only the repeated lines


3. sum
    1)
    echo "123 4434 213223 " | perl -MList::Util=sum -alne 'print sum @F'
    echo "1:3:4:21" | perl -MList::Util=sum -F: -alne 'print sum @F'

    2) sum of the numbers in the first column in a table
    perl -lane '$sum += $F[0]; END {print $sum}'


4. remove all blank lines
    perl -ne 'print unless /^$/'
    perl -ne 'print if /\S/'


5. remove all spacing between words
    perl -pe 's/ +//g'
    perl -pe 's/ +/ /g' (replace all space with one space)


6. insert a space between all characters
    perl -lpe 's// /g'


7. number all lines 
    perl -pe '$_ = "$. $_"'


8. number only non-empty lines
    perl -pe '$_ = ++$x." $_" if /./'
    perl -pe '$_ = ++$x." $_" if /\S/'

    1) drop empty line
    perl -ne '$_ = ++$x." $_" if /\S/'

    2) using custom format
    perl -ne 'printf "%-5d %s", $., $_' ( -:align to the left)


9. total number of lines
    perl -lne 'END { print $.}'

    1) print the number of non-empty lines
    perl -le 'print scalar(grep { /./ } <> )'
    perl -le 'print~~grep/./,<>' --> droping space and shorten form
    perl -lE 'say~~grep/./,<>'


10. print the number of lines in a file that match a pattern
    perl -lne '$x++ if /regex/; END { print $x+0}'


11. number words across all lines
    perl -pe 's/(\w+)/++$i.".$1"/ge'
    perl -pe '$i=0; s/(\w+)/++i.".$1"/ge' (on individual line == reset)


CALCULATIONS
------------

12. sum
    1) of all field on each line
    perl -MList::Util=sum -alne 'print sum @F'
    perl -MList::Util=sum -F:  -alne 'print sum @F' (':' separator)


    2) all fields on all lines
    perl -MList::Util=sum -alne 'push @S, @F; END {print sum @S}'
    perl -MList::Util=sum -alne '$s += sum @F; END { print $s }'   --> memory efficient


13. find smallest element
    1) on each line
    perl -MList::Util=min -lane 'print min @F'

    2) over all lines
    perl -MList::Util=min -alne '@M = (@M, @F); END {print min @M}'
    perl -MList::Util=min -alne '$min = min($min // (), @F); END {print $min}' --> memory efficient

    3) max
    perl -MList::Util=max -alne 'print max @F'
    perl -MList::Util=max -alne '@M = (@M, @F); END {print max @M}'
    perl -MList::Util=max -alne '$max = max($max // (), @F); END {print $max}'


14. replace each field with its absolute value
    perl -alne 'print "@{[map {abs} @F]}"'


15. total number of fields that match a pattern
    perl -alne 'map { /regex/ && $t++ } @F; END {print $t || 0 }'
    perl -alne '$t += /regex/ for @F; END {print $t}'
    perl -alne '$t += grep /regex/, @F; END {print $t}'

    +) print the total number of lines that match a patter
    perl -lne '/regex/ && $t++; END {print $t || 0}'


16. print time
    perl -le 'print time'
    perl -le 'print scalar gmtime'  (Greenwich Mean Time)
    perl -le 'print scalar localtime'


17. generate 10 random numbers between 5 and 15
    perl -le 'print join ",", map { int( rand(15-5) ) + 5} 1..10'


18. convert IP to unsigned integer
    perl -le 'print unpack("N", 127.0.0.1)'
    perl -MSocket -le 'print unpack("N", inet_aton("127.0.0.1"))'

    1) unsigned integer --> IP
    perl -MSocket -le 'print inet_ntoa(pack("N", 2130706433))'


STRING CREATION AND ARRAY CREATION
----------------------------------

19. generate and print the alphabet
    perl -le 'print a..z'


20. convert hex to decimal
    perl -le 'printf("%x", 255)'
    perl -le '$num= "ff"; print hex $num'


21. generate a random eight-character password
    perl -le 'print map { ("a".."z")[rand 26] } 1..8''


22. create a string of specific length
    perl -le 'print "a"x50'


23. create a string from the command-line arguments
    perl -le 'print "(", (join ",", @ARGV), ")"' val1 val2 val3


24. find the numberic values for characters in a string
    perl -le 'print join ", ", map { ord } split //, "hello world"'
    perl -le 'print join ", ", map { sprintf "0x%x", ord $_ } split //, "hello world"'
    perl -le 'print join ", ", unpack("C*", "hello world")'

    1) reverse ( numeric --> asc)
    perl -le 'print map chr, 99 111 100 105 110 103'
    perl -le 'print map chr, @ARGV' 99 111 100 105 110 103


25. generate an array with odd numbers from 1 to 100
    perl -le '@odd = grep { $_ % 2 == 1 } 1..100; print "@odd"'


26. find the length of a string
    perl -le 'print length "one-liners are great"'


27. find the number of elements in an array
    perl -le '@array = ("a".."z"); print scalar @array'
    perl -le '@array = ("a".."z"); print $#array +1'


TEXT CONVERSION AND SUBSTITUTION
--------------------------------

28. base64-encode a string
    perl -MMIME::Base64 -e 'print encode_base64("string")'
    perl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file

    1) decode
    perl -MMIME::Base64 -le 'print decode_base64("base64string")'
    perl -MMIME::Base64 -0777 -ne 'print decode_base64($_)' file


29. convert all text to uppercase
    perl -nle 'print uc'
    perl -ple '$_ = uc'
    perl -nle 'print "\U$_"'

    1) lower case
    perl -nle 'print lc'
    perl -nle 'print "\L$_"'

    2) uppercase only the first letter of each line
    perl -nle 'print ucfirst lc'
    perl -nle 'print "\u\L$_"'   (\u: uppercase the first character)

    3) title-case each line
    perl -ple 's/(\w+)/\u$1/g'


30. strip leading whitespace or tabs 
    1) from the beginning of each line
    perl -ple 's/^[ \t]+//'
    perl -ple 's/^\s+//'


    2) from the end of each line
    perl -ple 's/[ \t]+$//'
    perl -ple 's/\s+$//'


    3) both the beginning and end of each line
    perl -ple 's/^[ \t]+|[ \t]+$//g'


31. convert UNIX newlines to DOS/Windows newlines
    perl -pe 's|\012|\015\012|'     (\012: LF in UNIX, \015\012: CRLF in DOS/Windows)

    1) DOS/Windows newlines --> UNIX newlines
    perl -pe 's|\015\012|\012|'


32. substitute
    perl -pe 's/foo/bar/g'

    1) substitute 'foo' with 'bar' on lines that match 'baz'
    perl -pe '/baz/ && s/foo/bar/'
    perl -pe 's/foo/bar/ if /baz/'


SELECTIVE PRINTING AND DELETING OF CERTAIN LINES
------------------------------------------------

33. print lines
    1) the first line of a file
    perl -ne 'print; exit' file

    2) print 10 lines
    perl -ne 'print if $. <= 10' file
    perl -ne '$. <= 10 && print' file
    perl -ne 'print if 1..10' file
    perl -ne 'print; exit if $. == 10' file


    3) print last line
    perl -ne '$last = $_; END {print $last}' flie
    perl -ne 'print if eof' file    (eof function: returns 1 if the next read returns the end-of-file)

    4) print last 10 lines
    perl -ne 'push @a, $_; @a = @a[@a-10..@#a] if @a>10; END {print @a}' file
    perl -ne 'push @a, $_; shift @a if @a > 10; END {print @a}' flie  (shift: removes first element of array)


34. print only lines that match a regular expression
    perl -ne '/regex/ && print'
    perl -ne 'print if /regex/'

    1) multiple
    perl -ne '/AAA/ && /BBB/ && print'
    perl -ne '/AAA.*BBB.*CCC/ && print'


35. print line that are at least 80 characters long
    perl -ne 'print if length >= 80'
    perl -lne 'print if length >= 80'  (-l: dont' count line endings)


36. print only line 13
    perl -ne '$. == 13' && print && exit'

    1) print lines from 17 to 30
    perl -ne 'print if 17..30'  (filp-flop op.(..): when used with integer, the operands are tested against the $.)

    2) print all lines between two regular expressions
    perl -ne 'print if /regex1/../regex2/' ( ..: when used with regular expressions, the operands against $_)


37. print all lines containing digits
    perl -ne 'print if /\d/'

    1) only digits
    perl -ne 'print if /^\d+$/''
    perl -lne 'print unless /\D/'


38. print all repeated lines only once
    perl -ne 'print if ++$a{$_} == 2'


39. print all unique lines
    perl -ne 'print unless $a{$_}++'


40. increase all integers in a string by one
    $str =~ s/(\d+)/$1+1/ge
    perl -MRegexp::Common -pe 's/($RE{num}{real})/$1+1/ge'  (including floating pointe number)


41. check whether a word appears in a string twice
    /(word).*\1/











