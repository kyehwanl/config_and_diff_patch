
ASPA Validation Pseudo Code
===========================


VAL_Result_t ASPA_Validation (AS_Segment AS_PATH_List[], uint8_t as_path_length, uint8_t AFI, ...)
{
  uint32_t customerAS, providerAS
  bool     swap_flag = False

  // Initial Checks
  if Check (AS_PATH_List [Last] != Direct Neighbor) // neighbor AS
    return INVALID;

  if Check (AS_PATH_List includes AS_SET)   // AS_SET
    Current_Result = UNVERIFIABLE

  if Check (AS_PATH_List is Upstream)  // UpStream or DownStream
    then go to Upstream_Validation
  else
    then go to Downstream_Validation


Upstream_Validation:
  for id = range 0 ... as_path_length-1
  {
    customerAS = AS_PATH_List[id].ASN
    providerAS = AS_PATH_List[id+1].ASN

    Current_Result = ASPA_DB_Function(customerAS, providerAS, AFI)

    if Current_Result == VALID or UNKNOWN
      continue to next loop with id increased by 1

    if Current_Result == INVALID
      return INVALID
   }

   return Return_Result will be VALID (only if there is no UNKNOWN, no UNVERIFIABLE in the Current_Result),
                            or UNKNOWN
                            or UNVERIFIABLE (once UNVERIFIABLE set and all other hops are VALID)


Downstream_Validation:
  for id = range 0 ... as_path_length-1
  {
    customerAS = AS_PATH_List[id].ASN
    providerAS = AS_PATH_List[id+1].ASN

    if (swap_flag == True)
      Swap (customerAS, providerAS)

    Current_Result = ASPA_DB_Function(customerAS, providerAS, AFI)

    if Current_Result == VALID or UNKNOWN
      continue to next loop with id increased by 1

    if Current_Result == INVALID  && swap_flag == False
    {
      swap_flag = True
      continue to next loop with id increased by 1
    }
    else
      return INVALID
  }

  return Return_Result will be VALID (only if there is no UNKNOWN, no UNVERIFIABLE in the Current_Result),
                            or UNKNOWN
                            or UNVERIFIABLE (once UNVERIFIABLE set and all other hops are VALID)
}





