

VIM Regular Expression tips
============================

1.  s/\(.*\/\)\([0-9]\{1,2}\)\ \(.*\)/add \1\2 \2 \3/ 

   - before
  1.0.0.0/24 701 3257 13335 13335

   -  after
  add 1.0.0.0/24 24 701 3257 13335 13335



2. s/\(.*\/\)\([0-9]\{1,2}\)\ \(.*\ \)\([0-9]\+\)/add \1\2 \2 \4/

   - before
  1.0.0.0/24 701 3257 13335 13335

   -  after
  add 1.0.0.0/24 24 13335


3. s/\(.*\/\)\([0-9]\{1,2}\)\ \([0-9]\+$\)/add \1\2 \2 \3/

    in case of missing from #2, 




General Tips
============

(1) Compare files over ssh with vimdiff
     vimdiff config_and_diff_patch/tip_command scp://bgp2.antd.nist.gov//users/kyehwanl/config_and_diff_patch/tip_command
      or scp://bgp2.antd.nist.gov/~/config_and_diff_patch/tip_command
     AND (in vim command mode) :vsp scp://ts1/~/Projects/proj-bgp/quaggasrx/test_install/etc/bgpd.conf


(2) split and show list
    :20vs ./ --> same as Ctrl+e (pluggin function)


(3) capitalize first letter of each word
    :s/\<./\u&/g
    
      \<   : beginning of a word
      .    : matches the first character of a word
      \u   : make next character uppercase
      &    : matched pattern on left side


(4) Environment variable TERM change at starting 
    $ TERM=screen-256color vim <file>



(5) upper case
    
    Visual select the text, then U for uppercase or u for lowercase. 
    To swap all casing in a visual selection, press ~ (tilde). 
    
    Without using a visual selection, gU<motion> will make the characters in motion uppercase, 
    or use gu<motion> for lowercase.
    (for example, in motion: 
        gU then press '^', it converts the rest letters into upper case until the end of line)




Vimdiff tips
============

(1) Useful diff option

    set diffopt=iwhite, filler  
        (iwhite: ignore changes of white space, filler: insert lines at the same position to sync)


(2) :diffthis : to compare this window to the next window
    --> and then :diffget, or :diffput




Bundle Tips
===========

(1) Status Bar displays various information including a function name
    - Need bundle file:
        vim-powerline and tagbar plugins

    - in vimrc configuration, add followings:
        Bundle 'Lokaltog/vim-powerline'
        Bundle 'majutsushi/tagbar'


Session 
=======
 
(1) to make the current session stored:
    :mks[ession][!] ~/mysession.vim
    
(2) Then later you can source that vim file and you'll have your old session back:
    :so[urce] ~/mysession.vim

    or open vim with the -S option:
    $ vim -S ~/mysession.vim




Plugins
=======

(1) Disable auto-complete features (neocomplcache)
    :let g:neocomplcache_disable_auto_complete=1 (Entirely Disable)
    (https://stackoverflow.com/questions/21761953/how-to-disable-the-auto-complete-feature-on-periods)

    - two options are already set because of 'neocomplcache'
    :set completeopt=menuone,preview

    What we need is just menu, so cut the preview, to remove preview, (Recommended!!)
    :set completeopt-=preview





Map, noremap etc
================

  map is the "root" of all recursive mapping commands. The root form applies to all modes.
  noremap is the "root" of all non-recursive mapping commands. The root form applies to all modes.
  See below for what "recursive" means in this context.

  Prepending mode letters like n makes the root forms work in normal mode, etc.
  Use help map-modes will show you a few tables that explain how to control which modes the mapping applies to.

  (Mode letters:)
  n: normal only
  v: visual and select
  o: operator-pending
  x: visual only
  s: select only
  i: insert
  c: command-line
  l: insert, command-line, regexp-search (and others. Collectively called "Lang-Arg" pseudo-mode)

  "Recursive" means that the mapping is expanded to a result, then the result is expanded to another result, and so on.

  The expansion stops when one of these is true:
  the result is no longer mapped to anything else.
  a non-recursive mapping has been applied (i.e. the "noremap" [or one of its ilk] is the final expansion).

  At that point, vim's default "meaning" of the final result is applied/executed.
  "Non-recursive" means the mapping is only expanded once, and that result is applied/executed.

  (Example:)
   nmap K H
   nnoremap H G
   nnoremap G gg


  The above causes K to expand to H, then H to expand to G and stop. 
  It stops because of the nnoremap, which expands and stops immediately. 
  The meaning of G will be executed (i.e. "jump to last line"). 
  At most one non-recursive mapping will ever be applied in an expansion chain (it would be the last expansion to happen).
  The mapping of G to gg only applies if you press G, but not if you press K. 
  This would be true regardless of whether G was mapped recursively or not, since it's line 2 that caused the expansion of K to stop.




Cscope search with egrep
========================

1. Cscope insensitive search
  To make cscope's search (all search methods, not only egrep) case-insensitive by default,
  you must add the -C flag to your initialization command:

     :cscope add cscope.out -C
     or
     set csprg=cscope\ -C

               
2. cscope egrep pattern for special character
 - (strings wanted to search): "[proxy] asPathList.length "
 - pattern in vim
     :cs f e [[]proxy[]][ ] 
     -- special character(s) should be enclosed with '[ ]'
     -- here '[', ']', ':space:' are targets



















