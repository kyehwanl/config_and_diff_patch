
socat usage examples
--------------------


1. basic usage
==============

(1) one terminal, 

  $ socat TCP4-LISTEN:3334,reuseaddr,fork gopen:/tmp/capture,seek-end=0,append
   (then, the result will be written 'general open file', /tmp/capture or terminal by itself)

  or 

  $ socat TCP4-LISTEN:3334,reuseaddr,fork -  ('-': STDIO, you can use 'STDIO' instead of '-')


(2) the other terminal 

  $ date | socat STDIO tcp:localhost:3334

  or

  $ cat | socat STDIO tcp:localhost:3334

  or just, 

  $ socat tcp:localhost:3334 -  : connect localhost with port 3334 and reading from & writing to STDIO


 ** If one and the other terminal has different address (other network namespace or remote host),
   'localhost' should be replaced with ip address

   (for example)
   - global namespace(10.1.1.2): "socat TCP4-LISTEN:3334,reuseaddr,fork -"
   - other namespace(10.1.1.1) : "cat | socat STDIO tcp:10.1.1.2:3334"


2. forwarding
=============

  A. WEB

  (1) $ sudo socat TCP4-LISTEN:80,reuseaddr,fork tcp:www.antd.nist.gov:80
  (2) $ curl localhost


  result:
      kyehwanl@n4:~$ curl localhost
      <HTML>
      <HEAD>
      <TITLE>NIST/ITL Advanced Network Technologies Division (ANTD,892) </TITLE>
      <LINK HREF="mailto:webmaster@antd.nist.gov" REV="made">
      <script language="JavaScript" id="_fed_an_js_tag" 
      src="/js/federated-analytics.all.min.js?agency=NIST&subagency=antd&pua=UA-42404149-3&yt=true">
      </script>
      </HEAD>
      <BODY BGCOLOR="FFFFFF" TEXT="#000000"><center>
      <H1>NIST/ITL<br> Advanced Network Technologies Division<br> Software Distribution</H1></center>

      This web site is the distribution point for various NIST-developed
          ...



  B. TELNET

  (1) $ sudo socat TCP4-LISTEN:23,reuseaddr,fork tcp:node1.bs1.bgp-srx.emulab2.antd.nist.gov:2605
  (2) $ telnet localhost
   --> (result) above can access 'node1' with telnet



  C. X11 Port Forwarding
  
  (1) main terminal: 
    # socat tcp-listen:6100,fork,reuseaddr EXEC:'socat STDIO tcp\:localhost\:6010'

     - 6100 means any port to use as a relay port
     - 6010 can be vary, 6000 (default x11 port base) + $DISPLAY screen nuber(10)

      root@n3# xhost
      access control enabled, only authorized clients can connect
      INET:97-140.antd.nist.gov
      LOCAL:
      INET:localhost

      root@n3# echo $$
      3697



  (2) Network Namespace Terminal
    # socat tcp-listen:6010,fork,reuseaddr tcp:10.1.1.1:6100

    - listen from 6010: one netns(network namespace) instance's X11 display port
    - redirect to a server's address(10.1.1.1) and temp port(6100)


    A. xhost

      root@n3# socat tcp-listen:6010,fork,reuseaddr tcp:10.1.1.1:6100 &
      [1] 5741

      root@n3# xhost
      access control enabled, only authorized clients can connect
      ^Z
      [2]+  Stopped                 xhost

      root@n3# fg
      xhost
      INET:129.6.140.97       (no nameserver response within 5 seconds)
      LOCAL:
      INET:localhost

      root@n3# echo $$
      3587


   B. xterm
      root@n3# xterm --> success !!



  (3) 
   ** the reason why the relay port was used is, a direct connection to the main terminal,
        (tcp:10.1.1.1:6010) was connection refused somehow, so that it need to use a relay port(6100)


        root@n3:~/Shell_Script# socat tcp-listen:6010,fork,reuseaddr tcp:10.1.1.1:6010 &
        [1] 5733
        root@n3:~/Shell_Script# xhost
        2017/01/06 12:21:47 socat[5735] E connect(3, AF=2 10.1.1.1:6010, 16): Connection refused
        xhost:  unable to open display "localhost:10.0"



   ** FYI, process tree and processes
     root@n3:# ps aux | grep soca[t]
     root      5251  0.0  0.0  19596  1488 pts/2    S    11:53   0:00 socat tcp-listen:6100,fork,reuseaddr EXEC:socat STDIO tcp\:localhost\:6010
     root      5741  0.0  0.0  19596  1328 pts/3    S    12:23   0:00 socat tcp-listen:6010,fork,reuseaddr tcp:10.1.1.1:6100


      ├─ tmux(3318,kyehwanl)─┬─ bash(3319)─── bash(3697)─── socat(5251)
                             └─ bash(3324)─── bash(3587)─── socat(5741) 



3. case used in mininet
=======================

l@n4:~/ubuntu_test/download/mininet$ sudo ps aux | grep 601[2]
root     15272  0.0  0.0  19596  1328 ?        Ss   16:53   0:00 socat TCP-LISTEN:6012,fork,reuseaddr EXEC:'mnexec -a 1 socat STDIO TCP\:localhost\:6012'
root     15275  0.0  0.0  19596   772 ?        S    16:55   0:00 socat TCP-LISTEN:6012,fork,reuseaddr EXEC:'mnexec -a 1 socat STDIO TCP\:localhost\:6012'
root     15276  0.0  0.0  21688  1612 ?        S    16:55   0:00 socat STDIO TCP:localhost:6012
root     15286  0.0  0.0  19596  1328 ?        Ss   16:57   0:00 socat TCP-LISTEN:6012,fork,reuseaddr EXEC:'mnexec -a 1 socat STDIO TCP\:localhost\:6012'


 * mnexec -a 1:  "-a pid: attach to pid's network and mount namespaces"
                 mnexec is the process with -a that can find a name space by a pid number, in this case '1',
                 and run the following command('socat STDIO ...'') in the pid's name space.
                 Here '1' means 'init' process so that the following command will belong to 'init' process to run.


 * socat TCP-LISTEN:6012,fork,reuseaddr EXEC:'mnexec -a 1 socat STDIO TCP\:localhost\:6012'

   EXEC:<command-line>
              Forks a sub process that establishes communication with its parent process and invokes the specified
              program with execvp() .  <command-line> is a simple command with arguments separated by single  spa‐
              ces.  If  the  program  name contains a ’/’, the part after the last ’/’ is taken as ARGV[0]. If the
              program name is a relative path, the execvp() semantics for finding the  program  via  $PATH  apply.
              After  successful program start, socat writes data to stdin of the process and reads from its stdout
              using a UNIX domain socket generated by socketpair() per default. (example)
              Option groups: FD,SOCKET,EXEC,FORK,TERMIOS
              Useful options: path, fdin, fdout, chroot, su, su-d,  nofork,  pty,  stderr,  ctty,  setsid,  pipes,
              login, sigint, sigquit
              See also: SYSTEM






4. examples
===========

 (1) socat TCP4-LISTEN:www TCP4:www.domain.org:www

              installs a simple TCP port forwarder. With TCP4-LISTEN it listens on local port "www" until  a  con‐
              nection  comes  in, accepts it, then connects to the remote host (TCP4) and starts data transfer. It
              will not accept a second connection.











Some useful socat commands
==========================
(Source: http://technostuff.blogspot.com/2008/10/some-useful-socat-commands.html)



To link serial port ttyS0 to another serial port:

    socat /dev/ttyS0,raw,echo=0,crnl /dev/ttyS1,raw,echo=0,crnl

To get time from time server:

    socat TCP:time.nist.gov:13 -

To forward local http port to remote http port:

    socat TCP-LISTEN:80,fork TCP:www.domain.org:80

To forward terminal to the serial port COM1:

    socat READLINE,history=$HOME/.cmd_history /dev/ttyS0,raw,echo=0,crnl 


Simple file-transfer:

On the server-side: socat TCP-LISTEN:port filename
To send file fro the server: socat TCP:hostname:port filename

    socat - TCP4:www.domain.org:80

Transfers data between STDIO (-) and a TCP4 connection to port 80 of host www.domain.org. This example results in an interactive connection similar to telnet or netcat. The stdin terminal parameters are not changed, so you may close the relay with ^D or abort it with ^C.

    socat -d -d READLINE,history=$HOME/.http_history \
    TCP4:www.domain.org:www,crnl

This is similar to the previous example, but you can edit the current line in a bash like manner (READLINE) and use the history file .http_history; socat prints messages about progress (-d -d). The port is specified by service name (www), and correct network line termination characters (crnl) instead of NL are used.

    socat TCP4-LISTEN:www TCP4:www.domain.org:www

Installs a simple TCP port forwarder. With TCP4-LISTEN it listens on local port "www" until a connection comes in, accepts it, then connects to the remote host (TCP4) and starts data transfer. It will not accept a second connection.


    socat -d -d -lmlocal2 \
    TCP4-LISTEN:80,bind=myaddr1,su=nobody,fork,range=10.0.0.0/8,reuseaddr \
    TCP4:www.domain.org:80,bind=myaddr2

TCP port forwarder, each side bound to another local IP address (bind). This example handles an almost arbitrary number of parallel or consecutive connections by forking a new process after each accept(). It provides a little security by sudoing to user nobody after forking; it only permits connections from the private 10 network (range); due to reuseaddr, it allows immediate restart after master processes termination, even if some child sockets are not completely shut down. With -lmlocal2, socat logs to stderr until successfully reaching the accept loop. Further logging is directed to syslog with facility local2.


    socat TCP4-LISTEN:5555,fork,tcpwrap=script \
    EXEC:/bin/myscript,chroot=/home/sandbox,su-d=sandbox,pty,stderr

A simple server that accepts connections (TCP4-LISTEN) and forks a new child process for each connection; every child acts as single relay. The client must match the rules for daemon process name "script" in /etc/hosts.allow and /etc/hosts.deny, otherwise it is refused access (see "man 5 hosts_access"). For EXECuting the program, the child process chroots to /home/sandbox, sus to user sandbox, and then starts the program /home/sandbox/bin/myscript. Socat and myscript communicate via a pseudo tty (pty); myscripts stderr is redirected to stdout, so its error messages are transferred via socat to the connected client.

    socat EXEC:"mail.sh target@domain.com",fdin=3,fdout=4 \
    TCP4:mail.relay.org:25,crnl,bind=alias1.server.org,mss=512

mail.sh is a shell script, distributed with socat, that implements a simple SMTP client. It is programmed to "speak" SMTP on its FDs 3 (in) and 4 (out). The fdin and fdout options tell socat to use these FDs for communication with the program. Because mail.sh inherits stdin and stdout while socat does not use them, the script can read a mail body from stdin. Socat makes alias1 your local source address (bind), cares for correct network line termination (crnl) and sends at most 512 data bytes per packet (mss).


    socat - /dev/ttyS0,raw,echo=0,crnl

Opens an interactive connection via the serial line, e.g. for talking with a modem. raw and echo set ttyS0's terminal parameters to practicable values, crnl converts to correct newline characters. Consider using READLINE instead of `-'.


    socat UNIX-LISTEN:/tmp/.X11-unix/X1,fork \
    SOCKS4:host.victim.org:127.0.0.1:6000,socksuser=nobody,sourceport=20

With UNIX-LISTEN, socat opens a listening UNIX domain socket /tmp/.X11-unix/X1. This path corresponds to local XWindow display :1 on your machine, so XWindow client connections to DISPLAY=:1 are accepted. Socat then speaks with the SOCKS4 server host.victim.org that might permit sourceport 20 based connections due to an FTP related weakness in its static IP filters. Socat pretends to be invoked by socksuser nobody, and requests to be connected to loopback port 6000 (only weak sockd configurations will allow this). So we get a connection to the victims XWindow server and, if it does not require MIT cookies or Kerberos authentication, we can start work. Please note that there can only be one connection at a time, because TCP can establish only one session with a given set of addresses and ports.


    socat -u /tmp/readdata,seek-end=0,ignoreeof -


This is an example for unidirectional data transfer (-u). Socat transfers data from file /tmp/readdata (implicit address GOPEN), starting at its current end (seek-end=0 lets socat start reading at current end of file; use seek=0 or no seek option to first read the existing data) in a "tail -f" like mode (ignoreeof). The "file" might also be a listening UNIX domain socket (do not use a seek option then).

    (sleep 5; echo PASSWORD; sleep 5; echo ls; sleep 1) |
    socat - EXEC:'ssh -l user server',pty,setsid,ctty

EXECutes an ssh session to server. Uses a pty for communication between socat and ssh, makes it ssh's controlling tty (ctty), and makes this pty the owner of a new process group (setsid), so ssh accepts the password from socat.


    socat -u TCP4-LISTEN:3334,reuseaddr,fork \
    OPEN:/tmp/in.log,creat,append


Implements a simple network based message collector. For each client connecting to port 3334, a new child process is generated (option fork). All data sent by the clients are appended to the file /tmp/in.log. If the file does not exist, socat creats it. Option reuseaddr allows immediate restart of the server process.


    socat READLINE,noecho='[Pp]assword:' EXEC:'ftp ftp.server.com',pty,setsid,ctty


Wraps a command line history (READLINE) around the EXECuted ftp client utility. This allows editing and reuse of FTP commands for relatively comfortable browsing through the ftp directory hierarchy. The password is echoed! pty is required to have ftp issue a prompt. Nevertheless, there may occur some confusion with the password and FTP prompts.


    socat PTY,link=$HOME/dev/vmodem0,raw,echo=0,waitslave exec:'


Generates a pseudo terminal device (PTY) on the client that can be reached under the symbolic link $HOME/dev/vmodem0. An application that expects a serial line or modem can be configured to use $HOME/dev/vmodem0; its traffic will be directed to a modemserver via ssh where another socat instance links it with /dev/ttyS0.


    socat TCP4-LISTEN:2022,reuseaddr,fork \
    PROXY:proxy:www.domain.org:22,proxyport=3128,proxyauth=user:pass

starts a forwarder that accepts connections on port 2022, and directs them through the proxy daemon listening on port 3128 (proxyport) on host proxy, using the CONNECT method, where they are authenticated as "user" with "pass" (proxyauth). The proxy should establish connections to host www.domain.org on port 22 then.


    echo |socat -u - file:/tmp/bigfile,create,largefile,seek=100000000000


creates a 100GB sparse file; this requires a file system type that supports this (ext2, ext3, reiserfs, jfs; not minix, vfat). The operation of writing 1 byte might take long (reiserfs: some minutes; ext2: "no" time), and the resulting file can consume some disk space with just its inodes (reiserfs: 2MB; ext2:16KB).


   socat tcp-l:7777,reuseaddr,fork system:filan -i 0 -s >&2,nofork

listens for incoming TCP connections on port 7777. For each accepted connection, invokes a shell. This shell has its stdin and stdout directly connected to the TCP socket (nofork). The shell starts filan and lets it print the socket addresses to stderr (your terminal window).

    echo -e

functions as primitive binary editor: it writes the 4 bytes 000 014 000 000 to the executable /usr/bin/squid at offset 0x00074420 (this is a real world patch to make the squid executable from Cygwin run under Windows, actual per May 2004).


    socat - tcp:www.blackhat.org:31337,readbytes=1000

connect to an unknown service and prevent being flooded.













