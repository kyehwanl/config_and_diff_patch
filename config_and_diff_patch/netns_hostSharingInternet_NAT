
Network Namespace - Host Sharing Internet Connection using NAT
==============================================================
(http://blogs.igalia.com/dpino/2016/04/10/network-namespaces/)


1. iptable clear with -F (flush all)

    # iptables -F
    # iptables -L
    Chain INPUT (policy ACCEPT)
    target     prot opt source               destination

    Chain FORWARD (policy DROP)
    target     prot opt source               destination

    Chain OUTPUT (policy ACCEPT)
    target     prot opt source               destination
    ...

    Chain OUTPUT_direct (0 references)
    target     prot opt source               destination


2. basic network namespace configuration

 2.1 host side

    # ip netns
    # ip netns add ns1
    # ip link add v-eth1 type veth peer name v-peer1
    # ip link set v-peer1 netns ns1
    # ip addr add 10.1.1.1/24 dev v-eth1
    # ip link set v-eth1 up

 2.2 ns side

    # ip netns exec ns1 ip addr add 10.1.1.2/24 dev v-peer1
    # ip netns exec ns1 ip link set v-peer1 up
    # ip netns exec ns1 ip link set lo up
    # ip netns exec ns1 ip route add default via 10.1.1.1



 2.3 command examples ( from running net_emulator.py)

    +++ bridge instance not exist --> configure bridge  
    +++ bridge configuration start
    dry_run:  brctl addbr br1 
    dry_run:  brctl stp br1 off
    dry_run:  ifconfig br1 10.1.1.1/24 up

    [+] network namespace setting and bgp running

    +++ create network namespace nodes [0]
    dry_run:  ip netns add ns0
    dry_run:  ip link add veth0 type veth peer name veth1
    dry_run:  ip link set veth1 netns ns0

    dry_run:  ip netns exec ns0 ifconfig lo up
    dry_run:  ip netns exec ns0 ifconfig veth1 10.1.1.2/24 up
    dry_run:  ip netns exec ns0 ip route add default via 10.1.1.1
    dry_run:  brctl addif br1 veth0
    dry_run:  ip link set dev veth0 up
    +++ run bgp routing [0]
    dry_run:  ip netns exec ns0 bash -c 'ifconfig;pwd'
    dry_run:  ip netns exec ns0 bash -c '/opt/project/srx_test1/_inst/sbin/bgpd -f /opt/project/net_emul_test/net_emulator/bgpd.conf.n2.bgpsec -i /tmp/node2.pid -d'
    dry_run:  ps aux | grep bgp[d] | grep n2 | awk '{print $2}'

    +++ create network namespace nodes [1]
    dry_run:  ip netns add ns1
    dry_run:  ip link add veth2 type veth peer name veth3
    dry_run:  ip link set veth3 netns ns1
    dry_run:  ip netns exec ns1 ifconfig lo up
    dry_run:  ip netns exec ns1 ifconfig veth3 10.1.1.3/24 up
    dry_run:  ip netns exec ns1 ip route add default via 10.1.1.1
    dry_run:  brctl addif br1 veth2
    dry_run:  ip link set dev veth2 up
    +++ run bgp routing [1]
    dry_run:  ip netns exec ns1 bash -c 'ifconfig;pwd'
    dry_run:  ip netns exec ns1 bash -c '/opt/project/srx_test1/_inst/sbin/bgpd -f /opt/project/net_emul_test/net_emulator/bgpd.conf.n3.bgpsec -i /tmp/node3.pid -d'
    dry_run:  ps aux | grep bgp[d] | grep n3 | awk '{print $2}'





3. NAT configuration

        (eno16777984: host's NIC for internet connection
         eno16777984: inet 10.0.50.5 netmask 255.255.255.0)

    # echo 1 > /proc/sys/net/ipv4/ip_forward
    # iptables -P FORWARD DROP  (-P: policy <chain> <target>)
    # iptables -F FORWARD       (-F: flush : deleting all the rules)
    # iptables -t nat -F
    # iptables -t nat -A POSTROUTING -s 10.1.1.0/255.255.255.0 -o eno16777984 -j MASQUERADE 
    # iptables -A FORWARD -i eno16777984 -o v-eth1 -j ACCEPT    
    # iptables -A FORWARD -o eno16777984 -i v-eth1 -j ACCEPT    



4. Test 
    # ip netns exec ns1 ping 8.8.8.8
    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=38 time=14.1 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=38 time=13.9 ms
    64 bytes from 8.8.8.8: icmp_seq=3 ttl=38 time=15.8 ms
    --- 8.8.8.8 ping statistics ---
    3 packets transmitted, 3 received, 0% packet loss, time 2002ms
    rtt min/avg/max/mdev = 13.980/14.667/15.888/0.876 ms




5. In case of Using Bridge

5.1. General routing table setting

  -- just replace the ethernet interface with the bridge interface (br1)
    
    # iptables -P FORWARD DROP
    # iptables -F FORWARD
    # iptables -t nat -F
    # iptables -t nat -A POSTROUTING -s 10.1.1.0/255.255.255.0 -o eno16777984 -j MASQUERADE 
    # iptables -A FORWARD -i eno16777984 -o br1 -j ACCEPT                                   
    # iptables -A FORWARD -o eno16777984 -i br1 -j ACCEPT

 -- configure ip route setting inside each ns

    # ip netns exec ns1 bash --rcfile <(echo "PS1=\"ns1> \"")
    ns1> ip route add default via 10.1.1.1

    ns1> ping 8.8.8.8 -c 2
    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=39 time=14.7 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=39 time=35.3 ms
    --- 8.8.8.8 ping statistics ---
    2 packets transmitted, 2 received, 0% packet loss, time 1001ms
    rtt min/avg/max/mdev = 14.725/25.031/35.337/10.306 ms



5.2 Using Bridge (on vm-005) and Peer (on vm-011) wants to have direct connections to netns nodes (10.1.1.0/24) on vm-005
    ** Firewall setting(vm-011) is needed to be disabled, unless found a good policy to add to INPUT table
    (# service firewalld stop)

    ** UPDATED(0128-2020): 
        - Do not need to disable the firewall setting, 
        - instead using a bridge and network namespace is ok as same as vm-005 uses
    
    on Peer(vm-011), 
    # ip route add 10.1.1.0/24 via 10.0.50.5 dev eno16777984
    # route -n
        vmware-011> route -n
        Kernel IP routing table
        Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
        0.0.0.0         10.0.50.200     0.0.0.0         UG    100    0        0 eno16777984
        10.0.50.0       0.0.0.0         255.255.255.0   U     100    0        0 eno16777984
        10.1.1.0        10.0.50.5       255.255.255.0   UG    0      0        0 eno16777984
        172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
        172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker_gwbridge
        192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0
        

    -- Netowrk Test to netns instances on vm-005
        vmware.011-antd [2109]{.../project/srx_test1}-> ping 10.1.1.2
        PING 10.1.1.2 (10.1.1.2) 56(84) bytes of data.
        64 bytes from 10.1.1.2: icmp_seq=1 ttl=63 time=0.158 ms
        64 bytes from 10.1.1.2: icmp_seq=2 ttl=63 time=0.182 ms
        ^C
        --- 10.1.1.2 ping statistics ---
        2 packets transmitted, 2 received, 0% packet loss, time 999ms
        rtt min/avg/max/mdev = 0.158/0.170/0.182/0.012 ms
        vmware.011-antd [2110]{.../project/srx_test1}-> ping 10.1.1.3
        PING 10.1.1.3 (10.1.1.3) 56(84) bytes of data.
        64 bytes from 10.1.1.3: icmp_seq=1 ttl=63 time=0.164 ms
        64 bytes from 10.1.1.3: icmp_seq=2 ttl=63 time=0.148 ms
        ^C
        --- 10.1.1.3 ping statistics ---
        2 packets transmitted, 2 received, 0% packet loss, time 999ms
        rtt min/avg/max/mdev = 0.148/0.156/0.164/0.008 ms
       


    -- Configurations
       (1) bgpd on vm-011
       configure neighbor setting with the target's IP which is given by linux bridge 

       <from bgpd.conf.ext>
       router bgp 65011
       bgp router-id 10.0.50.11
       neighbor 10.1.1.2 remote-as 60002
       neighbor 10.1.1.2 bgpsec both
       neighbor 10.1.1.2 ebgp-multihop

       neighbor 10.1.1.3 remote-as 60003
       neighbor 10.1.1.3 bgpsec both
       neighbor 10.1.1.3 ebgp-multihop



      (2) netns instances within bridge 
      possible to directly connect bgp terminal with 'telnet ip 2605' and add neighbor info

       <from bgpd.conf.n2.bgpsec>
       router bgp 60002
       bgp router-id 10.1.1.2
       neighbor 10.0.50.11 remote-as 65011
       neighbor 10.1.1.3 remote-as 60003
       ...
  

  -- Bgpsec Running Test
      vmware-011> sh ip bgp
      BGP table version is 0, local router ID is 10.0.50.11                                                                                   Status codes: s suppressed, d damped, h history, * valid, > best, i - internal,
                    r RIB-failure, S Stale, R Removed
      Validation:    v - valid, n - notfound, i - invalid, ? - undefined
      SRx Status:    I - route ignored, D - SRx evaluation deactivated
      SRxVal Format: validation result (origin validation, path validation)
      Origin codes: i - IGP, e - EGP, ? - incomplete

         Ident    SRxVal SRxLP Status Network          Next Hop            Metric  LocPrf Weight Path
      *  +0000001 ?(?,?)          I   2.0.0.0          10.1.1.2                 0              0 60002 i
      *  +0000002 ?(?,?)          I   2.0.0.0/9        10.1.1.2                 0              0 60002 i
      *  +0000003 ?(?,?)          I   2.0.0.0/10       10.1.1.2                 0              0 60002 i
      *  +0000004 ?(?,?)          I   2.0.0.0/11       10.1.1.2                 0              0 60002 i
      *  +0000005 ?(?,?)          I   2.32.0.0/11      10.1.1.2                 0              0 60002 i
      *  +0000006 ?(?,?)          I   2.64.0.0/10      10.1.1.2                 0              0 60002 i
      *  +0000007 ?(?,?)          I   2.64.0.0/11      10.1.1.2                 0              0 60002 i
      *  +0000008 ?(?,?)          I   2.128.0.0/9      10.1.1.2                 0              0 60002 i
      *  +0000009 ?(?,?)          I   2.128.0.0/10     10.1.1.2                 0              0 60002 i
      *  +000000A ?(?,?)          I   2.192.0.0/10     10.1.1.2                 0              0 60002 i
      *  +000000B ?(?,?)          I   3.0.0.0          10.1.1.3                 0              0 60003 i
      *  +000000C ?(?,?)          I   3.0.0.0/9        10.1.1.3                 0              0 60003 i
      *  +000000D ?(?,?)          I   3.0.0.0/10       10.1.1.3                 0              0 60003 i
      *  +000000E ?(?,?)          I   3.0.0.0/11       10.1.1.3                 0              0 60003 i
      *  +000000F ?(?,?)          I   3.32.0.0/11      10.1.1.3                 0              0 60003 i
      *  +0000010 ?(?,?)          I   3.64.0.0/10      10.1.1.3                 0              0 60003 i
      *  +0000011 ?(?,?)          I   3.64.0.0/11      10.1.1.3                 0              0 60003 i
      *  +0000012 ?(?,?)          I   3.128.0.0/9      10.1.1.3                 0              0 60003 i
      *  +0000013 ?(?,?)          I   3.128.0.0/10     10.1.1.3                 0              0 60003 i
      *  +0000014 ?(?,?)          I   3.192.0.0/10     10.1.1.3                 0              0 60003 i
      *> -------- v(v,v)              100.10.10.0/24   0.0.0.0                  0          32768 i

      Total number of prefixes 21
      vmware-011> q
      Connection closed by foreign host.


5-3  Two Hosts (vm-005, vm-011) Test

    10.1.1.2 (container) ---  VM-005 (Host1)  ============  VM-011(Host2) --- 30.1.1.2 (container)

    (1) vm-005 configuration: 
        - same way of generating a network namespace instance in 5-1, 5-2
        - ip route rule added for accessing the netns instance on vm-011
            ip route add 30.1.1.0/24 via 10.0.50.11 dev eno16777984


    (2) vm-011 configuration: 
         - same way to generate a network namespace instance 
                brctl addbr br1
                brctl stp br1 off
                ifconfig br1 30.1.1.1/24 up

                ip netns add ns0
                ip link add veth0 type veth peer name veth1
                ip link set veth1 netns ns0
                ip netns exec ns0 ifconfig lo up
                ip netns exec ns0 ifconfig veth1 30.1.1.2/24 up
                ip netns exec ns0 ip route add default via 30.1.1.1
                brctl addif br1 veth0
                ip link set dev veth0 up


         - iptables rule: same way but except flush options (-F)  (need to preserve docker's NAT setting)

               iptables -t nat -A POSTROUTING -s 30.1.1.0/255.255.255.0 -o eno16777984 -j MASQUERADE
               iptables -A FORWARD -i eno16777984 -o br1 -j ACCEPT
               iptables -A FORWARD -o eno16777984 -i br1 -j ACCEPT 

                    
    (3) ping test from the netns0 on vm-005 to the one on vm-011

            [root@vmware-005 ]# ip netns exec ns0 bash --rcfile <(echo "PS1=\"ns0> \"") 
            ns0> route -n                                                                           
            Kernel IP routing table                                                                 
            Destination     Gateway         Genmask         Flags Metric Ref    Use Iface           
            0.0.0.0         10.1.1.1        0.0.0.0         UG    0      0        0 veth1           
            10.1.1.0        0.0.0.0         255.255.255.0   U     0      0        0 veth1           

            ns0> ping 30.1.1.2                                                                      
            PING 30.1.1.2 (30.1.1.2) 56(84) bytes of data.                                          
            64 bytes from 30.1.1.2: icmp_seq=1 ttl=62 time=0.238 ms                                 
            64 bytes from 30.1.1.2: icmp_seq=2 ttl=62 time=0.264 ms                                 
            ^C                                                                                      
            --- 30.1.1.2 ping statistics ---                                                        
            2 packets transmitted, 2 received, 0% packet loss, time 1000ms                          
            rtt min/avg/max/mdev = 0.238/0.251/0.264/0.013 ms 


    (4) Verify on the receiver side

            [root@vmware-011 ]# ip netns exec ns0 bash --rcfile <(echo "PS1=\"ns0> \"") 

            ns0> ifconfig
            lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
                    inet 127.0.0.1  netmask 255.0.0.0
                    inet6 ::1  prefixlen 128  scopeid 0x10<host>
                    loop  txqueuelen 1000  (Local Loopback)
                    RX packets 0  bytes 0 (0.0 B)
                    RX errors 0  dropped 0  overruns 0  frame 0
                    TX packets 0  bytes 0 (0.0 B)
                    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

            veth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
                    inet 30.1.1.2  netmask 255.255.255.0  broadcast 30.1.1.255
                    inet6 fe80::7c94:f3ff:fe99:61d3  prefixlen 64  scopeid 0x20<link>
                    ether 7e:94:f3:99:61:d3  txqueuelen 1000  (Ethernet)
                    RX packets 35  bytes 2686 (2.6 KiB)
                    RX errors 0  dropped 0  overruns 0  frame 0
                    TX packets 40  bytes 3176 (3.1 KiB)
                    TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0 

            ns0> tshark -i veth1
            Running as user "root" and group "root". This could be dangerous.
            Capturing on 'veth1'
              1 0.000000000    10.0.50.5 -> 30.1.1.2     ICMP 98 Echo (ping) request  id=0x3048, seq=1/256, ttl=62
              2 0.000038755     30.1.1.2 -> 10.0.50.5    ICMP 98 Echo (ping) reply    id=0x3048, seq=1/256, ttl=64 (request in 1)
              3 0.999948219    10.0.50.5 -> 30.1.1.2     ICMP 98 Echo (ping) request  id=0x3048, seq=2/512, ttl=62
              4 0.999980512     30.1.1.2 -> 10.0.50.5    ICMP 98 Echo (ping) reply    id=0x3048, seq=2/512, ttl=64 (request in 3)
              5 1.999970959    10.0.50.5 -> 30.1.1.2     ICMP 98 Echo (ping) request  id=0x3048, seq=3/768, ttl=62
              6 2.000009950     30.1.1.2 -> 10.0.50.5    ICMP 98 Echo (ping) reply    id=0x3048, seq=3/768, ttl=64 (request in 5)
            ^C6 packets captured





    *** NOTE: Previously, Docker Swarm also has same problem that the communication failed 
              between the instances on vmware farm and idac-servers.
              There was same situation that doesn't work for this two network instances communication test on the different hosts
              (ping test failed between the network namespace instance on vmware-farm and the one on idac-servers)



6. in order to use ICMP 'ping' from outside

  -- a client from outside needs to have 'ip route setting'

    example)
    [root@vmware-011 bgpd]# ip route add 10.1.1.2 via 10.0.50.5 
    [root@vmware-011 bgpd]# route -n
    Kernel IP routing table
    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
    0.0.0.0         10.0.50.200     0.0.0.0         UG    100    0        0 eno16777984
    10.0.50.0       0.0.0.0         255.255.255.0   U     100    0        0 eno16777984
    10.1.1.1        10.0.50.5       255.255.255.255 UGH   0      0        0 eno16777984
    10.1.1.2        10.0.50.5       255.255.255.255 UGH   0      0        0 eno16777984
    192.168.122.0   0.0.0.0         255.255.255.0   U     0      0        0 virbr0

    [root@vmware-011 bgpd]# ping 10.1.1.2 -c 3
    PING 10.1.1.2 (10.1.1.2) 56(84) bytes of data.
    64 bytes from 10.1.1.2: icmp_seq=1 ttl=63 time=0.196 ms
    64 bytes from 10.1.1.2: icmp_seq=2 ttl=63 time=0.152 ms
    64 bytes from 10.1.1.2: icmp_seq=3 ttl=63 time=0.178 ms

    --- 10.1.1.2 ping statistics ---
    3 packets transmitted, 3 received, 0% packet loss, time 2000ms
    rtt min/avg/max/mdev = 0.152/0.175/0.196/0.021 ms



  -- server side

    (1) bridge side

    [root@vmware-005 kyehwanl]# tcpdump -i br1 host 10.0.50.11        
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on br1, link-type EN10MB (Ethernet), capture size 65535 bytes
    12:52:19.668709 IP vmware-011.antd.nist.gov > 10.1.1.2: ICMP echo request, id 13924, seq 1, length 64
    12:52:19.668754 IP 10.1.1.2 > vmware-011.antd.nist.gov: ICMP echo reply, id 13924, seq 1, length 64
    12:52:20.669045 IP vmware-011.antd.nist.gov > 10.1.1.2: ICMP echo request, id 13924, seq 2, length 64
    12:52:20.669087 IP 10.1.1.2 > vmware-011.antd.nist.gov: ICMP echo reply, id 13924, seq 2, length 64
    ^C
    4 packets captured
    4 packets received by filter
    0 packets dropped by kernel



    (2) inside netns

    [root@vmware-005 kyehwanl]# ip netns exec ns0 bash
    [root@vmware-005 kyehwanl]# ifconfig
    lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
            inet 127.0.0.1  netmask 255.0.0.0
            inet6 ::1  prefixlen 128  scopeid 0x10<host>
            loop  txqueuelen 1  (Local Loopback)
            RX packets 20  bytes 1000 (1000.0 B)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 20  bytes 1000 (1000.0 B)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

    veth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
            inet 10.1.1.2  netmask 255.255.255.0  broadcast 10.1.1.255
            inet6 fe80::bcc3:efff:fe36:32d8  prefixlen 64  scopeid 0x20<link>
            ether be:c3:ef:36:32:d8  txqueuelen 1000  (Ethernet)
            RX packets 313  bytes 23855 (23.2 KiB)
            RX errors 0  dropped 0  overruns 0  frame 0
            TX packets 280  bytes 19497 (19.0 KiB)
            TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

    [root@vmware-005 kyehwanl]# tcpdump -i veth1 host 10.0.50.11
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on veth1, link-type EN10MB (Ethernet), capture size 65535 bytes
    12:59:04.558911 IP vmware-011.antd.nist.gov > vmware-005.antd.nist.gov: ICMP echo request, id 13990, seq 1, length 64
    12:59:04.558940 IP vmware-005.antd.nist.gov > vmware-011.antd.nist.gov: ICMP echo reply, id 13990, seq 1, length 64
    12:59:05.559053 IP vmware-011.antd.nist.gov > vmware-005.antd.nist.gov: ICMP echo request, id 13990, seq 2, length 64
    12:59:05.559070 IP vmware-005.antd.nist.gov > vmware-011.antd.nist.gov: ICMP echo reply, id 13990, seq 2, length 64
    12:59:06.559062 IP vmware-011.antd.nist.gov > vmware-005.antd.nist.gov: ICMP echo request, id 13990, seq 3, length 64
    12:59:06.559084 IP vmware-005.antd.nist.gov > vmware-011.antd.nist.gov: ICMP echo reply, id 13990, seq 3, length 64







7. Connect External BGPd as an observer

  -- connect another bgpd to obtain fully loaded bgp prefix
  -- disable firewall on external side might be needed

  (1) external bgpd
   configure neighbor setting with the target's real IP

   <from bgpd.conf.ext>
   router bgp 65011
   bgp router-id 10.0.50.11
   neighbor 10.0.50.5 remote-as 60001



  (2) internal base within bridge 
  possible to directly connect bgp terminal with 'telnet ip 2605' and add neighbor info

   <from bgpd.conf.base>
   router bgp 60001
   bgp router-id 10.1.1.1
   neighbor 10.0.50.11 remote-as 65011
   neighbor 10.1.1.2 remote-as 60002
   ...
  



8. DNS setting 
  (ref. http://man7.org/linux/man-pages/man8/ip-netns.8.html)

  -- netns side

  (1) create  /etc/netns/<namespace-name>/resolv.conf
  (2) fill in resolv.conf file with the host's DNS information (/etc/resolv.conf)









