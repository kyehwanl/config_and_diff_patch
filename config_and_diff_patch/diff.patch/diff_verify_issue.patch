diff --git a/bgpsec_openssl/bgpsec_openssl.c b/bgpsec_openssl/bgpsec_openssl.c
index bded04b..ebb8d48 100644
--- a/bgpsec_openssl/bgpsec_openssl.c
+++ b/bgpsec_openssl/bgpsec_openssl.c
@@ -647,6 +647,11 @@ int validate(SCA_BGPSecValidationData* data)
                == 1)
             {
               retVal = API_VALRESULT_VALID;
+              printf("VERIFY SUCCESS\n");
+            }
+            else
+            {
+              retVal = API_VALRESULT_INVALID; 
+              printf("VERIFY FAILED\n");      
+              break;                          
             }
           }
           else
@@ -764,13 +769,33 @@ int validate(SCA_BGPSecValidationData* data)
         u_int32_t* targetAS = (u_int32_t*)buffPtr;
         *targetAS = bgpsec_data->peerAS;
         buffPtr += 4; // Move to the path segment
+
+
+        if(origin)
         memcpy(buffPtr, bgpsec_data->myHost, LEN_SECPATHSEGMENT);
+        else
+          memcpy(bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessagePtr-2,
+              bgpsec_data->myHost, LEN_SECPATHSEGMENT);
                 
         u_int16_t sigLen  = ECDSA_size(ec_keys[0]);
         uint usedLen = 0;
         u_int8_t* sigBuff = malloc(sigLen);
         memset (sigBuff, 0, sigLen);
         
+        u_int8_t *pTmpHashMsgPtr = NULL;
+        u_int16_t iTmpHashMsgLeng = 0;
+
+        if(!origin)
+        {
+          pTmpHashMsgPtr  = bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessagePtr;
+          iTmpHashMsgLeng = bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessageLength;
+
+          bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessagePtr =
+            bgpsec_data->hashMessage->buffer;
+          bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessageLength =
+            bgpsec_data->hashMessage->bufferSize;
+        }
+
         // Now generate the hash
         // Temporary space for the generated message digest (hash)
         u_int8_t hashDigest[SHA256_DIGEST_LENGTH];
@@ -783,6 +808,13 @@ int validate(SCA_BGPSecValidationData* data)
         // Use only the first key.                
         int res = ECDSA_sign(0, hashDigest, SHA256_DIGEST_LENGTH, 
                                 sigBuff, (unsigned int*)&usedLen, ec_keys[0]);
+
+        if(!origin)
+        {
+          bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessagePtr = pTmpHashMsgPtr;
+          bgpsec_data->hashMessage->hashMessageValPtr[0]->hashMessageLength = iTmpHashMsgLeng;
+        }
+
         if (res != 1)
         {
           myStatus |= API_STATUS_INFO_SIGNATURE;
