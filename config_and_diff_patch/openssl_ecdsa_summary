


INDEX
=====
1. from the BGPSEC BIRD imple
    * generate the EC parameters, setting the keytype up
    * Verify the content of the key:
    * generate the certificate signing request
    * read in the SKI so we can set the distingiuished name using it
    * regenerate the certificate signing request with the correct subject
    * self-sign the certificate
2. Application 1
    * Separate public key from private key
3. Application 2
    (1) Create test file:
    (2) Sign test file with EC private key:
    (3) ECDSA signature is ASN.1 sequence of two integers (r,s), check this:
    (4) Verify file signature with EC public key:
4. Application 3
    * read certificate contents
    * Extract public key from certificate
5. BASIC way
6. ECDSA currently support curves
7. Creation of an ECDSA key using OpenSSL 0.9.8
8. Making use of ECDSA with 224bit public and private keys?
9. ECDSA asymmetric Key with OpenSSL
    Generate an ECDSA private Key
    Let's see components of our private key
    Extract a public key
    Sign data with our private key
    Verify signed data with our public key
        External Link
    C Source Code 얻어내는 법




1. from the BGPSEC BIRD imple
=============================

# generate the EC parameters, setting the keytype up
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ecparam -name prime256v1 -genkey -out test_pri_key
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ecparam -name prime256v1 -genkey -text
ASN1 OID: prime256v1
-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEICraZcan0sZyavL9+4nf7M9vWtE0yJf3dLjhFlCPMijjoAoGCCqGSM49
AwEHoUQDQgAEwsf4SXAFHWWAR7N6VF1NmL2ln+zmtO+39mkjMwEhzCJNgJ652rdN
Hv7EcHSlyZmixZztY4SWFaegi/GIF0M79g==
-----END EC PRIVATE KEY-----


# Verify the content of the key:
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ec -in test_pri_key -text        
read EC key
Private-Key: (256 bit)
priv:
    14:ab:3f:af:84:c8:de:b7:2a:10:7c:1c:9d:7b:00:
    6f:d0:ee:93:f1:dd:be:5b:52:7a:fa:5d:2c:77:47:
    c4:c1
pub: 
    04:df:5f:f0:e8:b8:94:41:d5:56:98:93:aa:db:81:
    94:1b:52:00:cf:79:cd:9e:1c:d8:66:b4:74:88:e6:
    24:45:22:e2:05:7c:cd:12:2f:e5:ce:07:b3:b3:2a:
    60:f2:3a:30:27:b9:c9:5f:81:49:8e:cc:fe:08:b0:
    f1:34:1f:bf:00
ASN1 OID: prime256v1
writing EC key
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIBSrP6+EyN63KhB8HJ17AG/Q7pPx3b5bUnr6XSx3R8TBoAoGCCqGSM49
AwEHoUQDQgAE31/w6LiUQdVWmJOq24GUG1IAz3nNnhzYZrR0iOYkRSLiBXzNEi/l
zgezsypg8jowJ7nJX4FJjsz+CLDxNB+/AA==
-----END EC PRIVATE KEY-----




# generate the certificate signing request
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl req -new -batch -config router-key.cnf -key test_pri_key -out test_csr
[kyehwanl@node5 bgpsec]$ cat test_csr
-----BEGIN CERTIFICATE REQUEST-----
MIIBJTCBzAIBADAlMSMwIQYDVQQDDBpmaW5pc2hNZUJlY2F1c2VUaGlzSXNXcm9u
ZzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABN9f8Oi4lEHVVpiTqtuBlBtSAM95
zZ4c2Ga0dIjmJEUi4gV8zRIv5c4Hs7MqYPI6MCe5yV+BSY7M/giw8TQfvwCgRTBD
BgkqhkiG9w0BCQ4xNjA0MBMGA1UdJQQMMAoGCCsGAQUFB2NjMB0GA1UdDgQWBBRF
ytCsRPd++qlGAumYQwUhW/R9zTAKBggqhkjOPQQDAgNIADBFAiEAozn6xQR2SXt9
EJ+hyH8xa+/iEFhDakVaUCVKlokKgygCICiKd3UPmJaLZU6mp/qs31LUo1wedAmE
SOY2q2ZHc6Ql
-----END CERTIFICATE REQUEST-----


[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl req -in test_csr -text
Certificate Request:
    Data:
        Version: 0 (0x0)
        Subject: CN=finishMeBecauseThisIsWrong
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:df:5f:f0:e8:b8:94:41:d5:56:98:93:aa:db:81:
                    94:1b:52:00:cf:79:cd:9e:1c:d8:66:b4:74:88:e6:
                    24:45:22:e2:05:7c:cd:12:2f:e5:ce:07:b3:b3:2a:
                    60:f2:3a:30:27:b9:c9:5f:81:49:8e:cc:fe:08:b0:
                    f1:34:1f:bf:00
                ASN1 OID: prime256v1
        Attributes:
        Requested Extensions:
            X509v3 Extended Key Usage:
                1.3.6.1.5.5.7.99.99
            X509v3 Subject Key Identifier:
                45:CA:D0:AC:44:F7:7E:FA:A9:46:02:E9:98:43:05:21:5B:F4:7D:CD
    Signature Algorithm: ecdsa-with-SHA256
        30:45:02:21:00:a3:39:fa:c5:04:76:49:7b:7d:10:9f:a1:c8:
        7f:31:6b:ef:e2:10:58:43:6a:45:5a:50:25:4a:96:89:0a:83:
        28:02:20:28:8a:77:75:0f:98:96:8b:65:4e:a6:a7:fa:ac:df:
        52:d4:a3:5c:1e:74:09:84:48:e6:36:ab:66:47:73:a4:25
-----BEGIN CERTIFICATE REQUEST-----
MIIBJTCBzAIBADAlMSMwIQYDVQQDDBpmaW5pc2hNZUJlY2F1c2VUaGlzSXNXcm9u
ZzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABN9f8Oi4lEHVVpiTqtuBlBtSAM95
zZ4c2Ga0dIjmJEUi4gV8zRIv5c4Hs7MqYPI6MCe5yV+BSY7M/giw8TQfvwCgRTBD
EJ+hyH8xa+/iEFhDakVaUCVKlokKgygCICiKd3UPmJaLZU6mp/qs31LUo1wedAmE
SOY2q2ZHc6Ql
-----END CERTIFICATE REQUEST-----



# read in the SKI so we can set the distingiuished name using it
SKI = 45CAD0AC44F77EFAA94602E9984305215BF47DCD


# regenerate the certificate signing request with the correct subject
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl req -new -batch -subj /CN=45CAD0AC44F77EFAA94602E9984305215BF47DCD -config router-key.cnf -key test_pri_key -out test_csr2
[kyehwanl@node5 bgpsec]$ cat test_csr2
-----BEGIN CERTIFICATE REQUEST-----
MIIBMjCB2gIBADAzMTEwLwYDVQQDDCg0NUNBRDBBQzQ0Rjc3RUZBQTk0NjAyRTk5
ODQzMDUyMTVCRjQ3RENEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE31/w6LiU
QdVWmJOq24GUG1IAz3nNnhzYZrR0iOYkRSLiBXzNEi/lzgezsypg8jowJ7nJX4FJ
jsz+CLDxNB+/AKBFMEMGCSqGSIb3DQEJDjE2MDQwEwYDVR0lBAwwCgYIKwYBBQUH
Y2MwHQYDVR0OBBYEFEXK0KxE9376qUYC6ZhDBSFb9H3NMAoGCCqGSM49BAMCA0cA
MEQCIHbYT+V1aD7wYC2KvzLK7a+mUrjwvZZCRGQKVFhNWyg3AiBUIiGRxd109S9r
yMUsfpfyvg2TPk2fMB9bqty6HmLB1Q==
-----END CERTIFICATE REQUEST-----



[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl req -in test_csr2 -text
Certificate Request:
    Data:
        Version: 0 (0x0) 
        Subject: CN=45CAD0AC44F77EFAA94602E9984305215BF47DCD
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub:
                    04:df:5f:f0:e8:b8:94:41:d5:56:98:93:aa:db:81:
                    94:1b:52:00:cf:79:cd:9e:1c:d8:66:b4:74:88:e6:
                    24:45:22:e2:05:7c:cd:12:2f:e5:ce:07:b3:b3:2a:
                    60:f2:3a:30:27:b9:c9:5f:81:49:8e:cc:fe:08:b0:
                    f1:34:1f:bf:00
                ASN1 OID: prime256v1
        Attributes:
        Requested Extensions:
            X509v3 Extended Key Usage:
                1.3.6.1.5.5.7.99.99
            X509v3 Subject Key Identifier:
                45:CA:D0:AC:44:F7:7E:FA:A9:46:02:E9:98:43:05:21:5B:F4:7D:CD
    Signature Algorithm: ecdsa-with-SHA256
        30:44:02:20:76:d8:4f:e5:75:68:3e:f0:60:2d:8a:bf:32:ca:
        ed:af:a6:52:b8:f0:bd:96:42:44:64:0a:54:58:4d:5b:28:37:
        02:20:54:22:21:91:c5:dd:74:f5:2f:6b:c8:c5:2c:7e:97:f2:
        be:0d:93:3e:4d:9f:30:1f:5b:aa:dc:ba:1e:62:c1:d5
-----BEGIN CERTIFICATE REQUEST-----
MIIBMjCB2gIBADAzMTEwLwYDVQQDDCg0NUNBRDBBQzQ0Rjc3RUZBQTk0NjAyRTk5
ODQzMDUyMTVCRjQ3RENEMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE31/w6LiU
QdVWmJOq24GUG1IAz3nNnhzYZrR0iOYkRSLiBXzNEi/lzgezsypg8jowJ7nJX4FJ
jsz+CLDxNB+/AKBFMEMGCSqGSIb3DQEJDjE2MDQwEwYDVR0lBAwwCgYIKwYBBQUH
Y2MwHQYDVR0OBBYEFEXK0KxE9376qUYC6ZhDBSFb9H3NMAoGCCqGSM49BAMCA0cA
MEQCIHbYT+V1aD7wYC2KvzLK7a+mUrjwvZZCRGQKVFhNWyg3AiBUIiGRxd109S9r
yMUsfpfyvg2TPk2fMB9bqty6HmLB1Q==
-----END CERTIFICATE REQUEST-----




# self-sign the certificate
# XXX: or CA-sign it

/usr/local/ssl/bin/openssl x509 -sha256 -extfile router-key.cnf -extensions bgpsec_router_ext -set_serial `date +%Y%m%d0001` -in test_csr2 -outform DER -out test_pub_cert_file -req -signkey test_pri_key -days 365
Signature ok
subject=/CN=45CAD0AC44F77EFAA94602E9984305215BF47DCD
Getting Private key

(참고) -sha256대신 -ecdsa-with-SHA1도 됨


→ 여기서 나온 test_pub_cert_file을 

input_bio = BIO_new(BIO_s_file());
if (BIO_read_filename(input_bio, filenamebuf)  // ← filenamebuf에 test_pub_cert_file의 경로를 지정
x509_cert = X509_new();
x509_cert = d2i_X509_bio(input_bio, &x509_cert); /* DER/ASN1 */ 에서 읽게됨


(Q1) 만약 self-signed cert 이 아니라면 -signkey에 들어가는 private key가 CA가 자체적으로 가지고 있는 key-pair의 private키가 아닌가??
        그리고 이미 CSR(Certificate Signing Request)를 만들때 client의 private키가 그때 사용되었으니 CA가 certificate을 만드는 시기엔
        client의 private키가 아니라 sign하는 CA의 private 키가 사용되기 때문이라고 생각하는데...

2. Application 1
================

# Separate public key from private key
[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ec -in test_pri_key -text -pubout -out test_pubkey
read EC key
writing EC key


[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ec -in test_pubkey -text -pubin -noout
read EC key
Private-Key: (256 bit)
pub: 
    04:df:5f:f0:e8:b8:94:41:d5:56:98:93:aa:db:81:
    94:1b:52:00:cf:79:cd:9e:1c:d8:66:b4:74:88:e6:
    24:45:22:e2:05:7c:cd:12:2f:e5:ce:07:b3:b3:2a:
    60:f2:3a:30:27:b9:c9:5f:81:49:8e:cc:fe:08:b0:
    f1:34:1f:bf:00
ASN1 OID: prime256v1

[kyehwanl@node5 bgpsec]$ /usr/local/ssl/bin/openssl ec -in test_pubkey -text -pubin
read EC key
Private-Key: (256 bit)
pub: 
    04:df:5f:f0:e8:b8:94:41:d5:56:98:93:aa:db:81:
    94:1b:52:00:cf:79:cd:9e:1c:d8:66:b4:74:88:e6:
    24:45:22:e2:05:7c:cd:12:2f:e5:ce:07:b3:b3:2a:
    60:f2:3a:30:27:b9:c9:5f:81:49:8e:cc:fe:08:b0:
    f1:34:1f:bf:00
ASN1 OID: prime256v1
writing EC key
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE31/w6LiUQdVWmJOq24GUG1IAz3nN
nhzYZrR0iOYkRSLiBXzNEi/lzgezsypg8jowJ7nJX4FJjsz+CLDxNB+/AA==
-----END PUBLIC KEY-----



3. Application 2
================

(1) Create test file:
$ echo test test test > test_file.txt

(2) Sign test file with EC private key:
[kyehwanl@node1 node1]$ openssl dgst -sign pri_key_n1 -sha256 < test_file.txt -out test_sig.bin

(3) ECDSA signature is ASN.1 sequence of two integers (r,s), check this:
[kyehwanl@node1 node1]$ openssl asn1parse -in test_sig.bin -inform der
    0:d=0  hl=2 l=  69 cons: SEQUENCE          
    2:d=1  hl=2 l=  33 prim: INTEGER           :90550D9BD6F3210F01C231720A7C019631E87D8F285F666F15C3376CE4123BBF
   37:d=1  hl=2 l=  32 prim: INTEGER           :35EA24E387D87B2A2297C371AE2658D10E66B6A2BAC1F9FE4CE916A67C31137D

(4) Verify file signature with EC public key:
[kyehwanl@node1 node1]$ openssl dgst -verify pub_key_n1 -sha256 -signature test_sig.bin < test_file.txt 
Verified OK




4. Application 3
================

# read certificate contents
[kyehwanl@node1 node3]$ /usr/local/ssl/bin/openssl x509 -inform der -in pub_cert_n3 -text
Certificate:
    Data:
        Version: 3 (0x2)
        Serial Number:
            2e:e4:72:e2:b1
        Signature Algorithm: ecdsa-with-SHA1
        Issuer: CN=492AAE72485D926CACDA2D259BE19DAE82DFBDE3
        Validity
            Not Before: Jan 23 18:46:52 2014 GMT
            Not After : Jan 23 18:46:52 2015 GMT
        Subject: CN=492AAE72485D926CACDA2D259BE19DAE82DFBDE3
        Subject Public Key Info:
            Public Key Algorithm: id-ecPublicKey
                Public-Key: (256 bit)
                pub: 
                    04:48:2b:88:50:81:12:cb:4c:c3:8a:83:0d:3e:d8:
                    33:14:5f:a3:85:24:a4:83:1e:77:82:bc:02:69:0b:
                    ba:03:2c:b1:97:2c:d8:33:7f:c3:d8:49:96:40:ce:
                    fd:ad:4e:5e:10:37:c9:9a:55:88:1c:e6:f8:dd:0c:
                    94:73:cf:e8:ea
                ASN1 OID: prime256v1
        X509v3 extensions:
            X509v3 Key Usage: 
                Digital Signature
            X509v3 Basic Constraints: 
                CA:FALSE
            X509v3 Subject Key Identifier: 
                49:2A:AE:72:48:5D:92:6C:AC:DA:2D:25:9B:E1:9D:AE:82:DF:BD:E3
            X509v3 Extended Key Usage: 
                1.3.6.1.5.5.7.99.99
    Signature Algorithm: ecdsa-with-SHA1
        30:45:02:21:00:a8:81:68:eb:a8:09:de:7b:b8:a3:48:0b:8b:
        33:37:f6:f2:02:ec:da:0f:77:5e:9f:91:ca:2c:ae:bb:2f:88:
        e7:02:20:4f:3d:3b:e1:77:f3:48:b5:9f:1f:84:2c:32:ff:ed:
        4e:d3:dd:e7:67:83:18:d9:de:04:02:81:e1:bf:04:02:f3
-----BEGIN CERTIFICATE-----
MIIBpTCCAUygAwIBAgIFLuRy4rEwCQYHKoZIzj0EATAzMTEwLwYDVQQDDCg0OTJB
QUU3MjQ4NUQ5MjZDQUNEQTJEMjU5QkUxOURBRTgyREZCREUzMB4XDTE0MDEyMzE4
NDY1MloXDTE1MDEyMzE4NDY1MlowMzExMC8GA1UEAwwoNDkyQUFFNzI0ODVEOTI2
Q0FDREEyRDI1OUJFMTlEQUU4MkRGQkRFMzBZMBMGByqGSM49AgEGCCqGSM49AwEH
A0IABEgriFCBEstMw4qDDT7YMxRfo4UkpIMed4K8AmkLugMssZcs2DN/w9hJlkDO
/a1OXhA3yZpViBzm+N0MlHPP6OqjTjBMMAsGA1UdDwQEAwIHgDAJBgNVHRMEAjAA
MB0GA1UdDgQWBBRJKq5ySF2SbKzaLSWb4Z2ugt+94zATBgNVHSUEDDAKBggrBgEF
BQdjYzAJBgcqhkjOPQQBA0gAMEUCIQCogWjrqAnee7ijSAuLMzf28gLs2g93Xp+R
yiyuuy+I5wIgTz074XfzSLWfH4QsMv/tTtPd52eDGNneBAKB4b8EAvM=
-----END CERTIFICATE-----



# Extract public key from certificate
[kyehwanl@node1 node1]$ /usr/local/ssl/bin/openssl x509 -inform der -in pub_cert_n1 -pubkey -noout
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE1tMn7Gz3BYCNzYAPl/SfSlrw/3cQ
197TEoy9/BwSWZJKiwr0e/9sNZ9BTeQLTR+NV5zBwNZHvjSOPu4G1Z8p8w==
-----END PUBLIC KEY-----

→ 여기서 위의 command의 스위치에 ‘-text’를 붙이면 x509 cert.가 또한 같이 출력

-- 공개키를 파일로 출력하고 보기
[kyehwanl@node1 node1]$ /usr/local/ssl/bin/openssl x509 -inform der -in pub_cert_n1 -pubkey -noout > pub_key.pem
[kyehwanl@node1 node1]$ /usr/local/ssl/bin/openssl ec -in pub_key.pem -pubin -text -noout




-- 여기서, 공개키의 pem 포맷을 der 포맷으로 바꿔서 나타내기
openssl x509 -in certificate.cer -pubkey -noout | openssl enc -base64 -d > publickey.der


5. BASIC way
============

If you haven't chosen a curve, you can list them with this command:
openssl ecparam -list_curves


I picked sect571r1 for this example. Use this to generate an EC private key if you don't have one already:
openssl ecparam -out ec_key.pem -name sect571r1 -genkey 


And then generate the certificate. Your certificate will be in cert.pem.
openssl req -new -key ec_key.pem -x509 -nodes -days 365 -out cert.pem





6. ECDSA currently support curves
=================================

http://wiki.strongswan.org/projects/strongswan/wiki/EcDsaSecret


7. Creation of an ECDSA key using OpenSSL 0.9.8
===============================================

You can create an ECDSA key with the openssl ecparam command.
openssl ecparam -list_curves


gives you a huge list of available elliptic curves but IKEv2 currently supports
only the following three curves:
prime256v1
secp384r1
secp521r1




8. Making use of ECDSA with 224bit public and private keys?
===========================================================

1) Generate and display EC private/public key:
# openssl ecparam -genkey -name secp224r1 -out ec-key.pem
# openssl ec -in ec-key.pem -text -noout
read EC key
Private-Key: (224 bit)
priv:
47:ed:fe:43:2b:1a:7f:27:ed:e3:99:0a:5b:af:e7:
33:03:cc:5a:2f:da:b9:a3:06:e8:3f:d6:7d
pub:
04:ca:77:df:dc:af:86:a7:e0:a0:4f:c2:29:5d:fc:
be:0b:75:60:ca:7c:a2:f8:bf:0d:4e:53:f2:cf:1e:
5a:98:02:a7:72:e0:3e:34:9c:04:fe:fa:1c:f4:1a:
c9:26:1b:0a:8f:5d:a2:fb:73:32:0c:a4
ASN1 OID: secp224r1

2) Separate public key from private key
# openssl ec -in ec-key.pem -text -pubout -out ec-key-pub.pem
read EC key
writing EC key
# openssl ec -in ec-key-pub.pem -text -pubin -noout
read EC key
pub:
04:ca:77:df:dc:af:86:a7:e0:a0:4f:c2:29:5d:fc:
be:0b:75:60:ca:7c:a2:f8:bf:0d:4e:53:f2:cf:1e:
5a:98:02:a7:72:e0:3e:34:9c:04:fe:fa:1c:f4:1a:
c9:26:1b:0a:8f:5d:a2:fb:73:32:0c:a4
ASN1 OID: secp224r1

3) Create test file:
# echo test test test > file.txt

4) Sign test file with EC private key:
# openssl dgst -sign ec-key.pem \
-ecdsa-with-SHA1 < file.txt > file.sig

5) ECDSA signature is ASN.1 sequence of two integers (r,s), check this:
# openssl asn1parse -in file.sig -inform der
0:d=0 hl=2 l= 60 cons: SEQUENCE
2:d=1 hl=2 l= 28 prim: INTEGER :5B3E9C6F568B343C32ED2...
32:d=1 hl=2 l= 28 prim: INTEGER :2F1623E54D193AF7D0984...

6) Verify file signature with EC public key:
# openssl dgst -verify ec-key-pub.pem \
-ecdsa-with-SHA1 -signature file.sig < file.txt
Verified OK

DSA signature for every sign operation are different
because of randomly generated parameter k for every sign.




9. ECDSA asymmetric Key with OpenSSL
====================================

Generate an ECDSA private Key
First, we need to generate our private key. We will use it to sign our data and generate corresponding public keys. The public keys will be used later to authenticate signed data.
Here the command to use in Cygwin: 
openssl ecparam -genkey -name secp384r1 -noout -out private.pem
secp384r1 is just a kind of elliptic curve, the command 
openssl ecparam -list_curves
will show you all the available curves in OpenSSL but only 3 are currently supported by IKEv2:
prime256v1 
secp384r1 
secp521r1
The generated file "private.pem" now contains our private key!  
 Let's see components of our private key
To see exactly what information are contain in our private key, run the following command: 
 openssl ec -in private.pem -text -noout

The result will be for example:
read EC key
Private-Key: (384 bit)
priv:
        00:e5:71:86:60:3e:67:ac:3e:8b:c4:62:a1:74:8a:
        0c:3c:98:d9:38:ac:9b:a0:a8:9d:08:8f:94:b3:b8:
        2c:e4:fd:a1:63:18:c6:51:f9:94:85:0b:aa:78:2f:
        38:dd:4d:d4
pub:
        04:be:a2:35:33:da:a7:43:87:6e:6c:7b:3d:10:a1:
        3d:94:5f:c1:aa:1a:f5:82:c1:c9:4b:b5:d2:d8:0b:
        dd:f4:48:6a:23:fb:d7:b2:46:5b:7b:d3:1e:47:4c:
        bc:cb:55:ff:37:88:49:c0:f2:2a:04:35:d7:73:fd:
        8e:84:87:18:15:87:c4:d9:01:81:37:5e:83:38:f5:
    ca:df:60:4c:de:1a:79:6e:cd:1b:31:7e:40:99:5f:
    66:5c:fd:84:39:fc:7c
ASN1 OID: secp384r1
Extract a public key
Now we want to extract a public key to give to our friend so he can check that the data he received are really from us.
Run the following command: 
openssl ec -in private.pem -pubout -out public.pem
Our public key "public.pem" is now ready.  
Sign data with our private key
echo -n "my data" | openssl dgst -ecdsa-with-SHA1 -sign private.pem -out signature.bin
Verify signed data with our public key
openssl dgst -sha1 -verify public.pem -signature signature.bin data
If the public key matchs the private one, we will end up with the following message:

Verified OK
Which means that the signature of our message has successfully been authenticated by our friend.

External Link
http://wiki.strongswan.org/projects/strongswan/wiki/EcDsaSecret
http://www.madboa.com/geek/openssl/
http://kjur.github.io/jsrsasign/sample-ecdsa.html



C Source Code 얻어내는 법
[kyehwanl@node1 node1]$  /usr/local/ssl/bin/openssl ecparam -name prime256v1 -genkey -text -C
ASN1 OID: prime256v1
static unsigned char ec_p_256[] = {
        0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
        };

static unsigned char ec_a_256[] = {
        0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFC
        };

static unsigned char ec_b_256[] = {
        0x5A,0xC6,0x35,0xD8,0xAA,0x3A,0x93,0xE7,0xB3,0xEB,0xBD,0x55,
        0x76,0x98,0x86,0xBC,0x65,0x1D,0x06,0xB0,0xCC,0x53,0xB0,0xF6,
        0x3B,0xCE,0x3C,0x3E,0x27,0xD2,0x60,0x4B
        };

static unsigned char ec_gen_256[] = {
        0x04,0x6B,0x17,0xD1,0xF2,0xE1,0x2C,0x42,0x47,0xF8,0xBC,0xE6,
        0xE5,0x63,0xA4,0x40,0xF2,0x77,0x03,0x7D,0x81,0x2D,0xEB,0x33,
        0xA0,0xF4,0xA1,0x39,0x45,0xD8,0x98,0xC2,0x96,0x4F,0xE3,0x42,
        0xE2,0xFE,0x1A,0x7F,0x9B,0x8E,0xE7,0xEB,0x4A,0x7C,0x0F,0x9E,
        0x16,0x2B,0xCE,0x33,0x57,0x6B,0x31,0x5E,0xCE,0xCB,0xB6,0x40,
        0x68,0x37,0xBF,0x51,0xF5
        };

static unsigned char ec_order_256[] = {
        0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,
        0xFF,0xFF,0xFF,0xFF,0xBC,0xE6,0xFA,0xAD,0xA7,0x17,0x9E,0x84,
        0xF3,0xB9,0xCA,0xC2,0xFC,0x63,0x25,0x51
        };

static unsigned char ec_cofactor_256[] = {
        0x01
        };



EC_GROUP *get_ec_group_256(void)
        {
        int ok=0;
        EC_GROUP *group = NULL;
        EC_POINT *point = NULL;
        BIGNUM   *tmp_1 = NULL, *tmp_2 = NULL, *tmp_3 = NULL;

        if ((tmp_1 = BN_bin2bn(ec_p_256, sizeof(ec_p_256), NULL)) == NULL)
                goto err;
        if ((tmp_2 = BN_bin2bn(ec_a_256, sizeof(ec_a_256), NULL)) == NULL)
                goto err;
        if ((tmp_3 = BN_bin2bn(ec_b_256, sizeof(ec_b_256), NULL)) == NULL)
                goto err;
        if ((group = EC_GROUP_new_curve_GFp(tmp_1, tmp_2, tmp_3, NULL)) == NULL)
                goto err;

        /* build generator */
        if ((tmp_1 = BN_bin2bn(ec_gen_256, sizeof(ec_gen_256), tmp_1)) == NULL)
                goto err;
        point = EC_POINT_bn2point(group, tmp_1, NULL, NULL);
        if (point == NULL)
                goto err;
        if ((tmp_2 = BN_bin2bn(ec_order_256, sizeof(ec_order_256), tmp_2)) == NULL)
                goto err;
        if ((tmp_3 = BN_bin2bn(ec_cofactor_256, sizeof(ec_cofactor_256), tmp_3)) == NULL)
                goto err;
        if (!EC_GROUP_set_generator(group, point, tmp_2, tmp_3))
                goto err;

        ok=1;
err:
        if (tmp_1)
                BN_free(tmp_1);
        if (tmp_2)
                BN_free(tmp_2);
        if (tmp_3)
                BN_free(tmp_3);
        if (point)
                EC_POINT_free(point);
        if (!ok)
                {
                EC_GROUP_free(group);
                group = NULL;
                }
        return(group);
        }
-----BEGIN EC PARAMETERS-----
BggqhkjOPQMBBw==
-----END EC PARAMETERS-----
-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIOQ6O+ZlU/MVKEah5wd/qQgfa5WDwti6FWR4aa38QYXyoAoGCCqGSM49
AwEHoUQDQgAE7QEfTaSuEBLh1mtOYRLT9TwJDSqhNhm4/xsuqwZwTRNDt+ckFhzH
yO0ipGpHT2Hs6z86m49XTbxp/ssPNCOKRQ==
-----END EC PRIVATE KEY-----





