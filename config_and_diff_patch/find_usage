0. Based on Access / Modification / Changed Time
=================================================
-mmin  n : File's data was last modified n minutes ago.
-mtime n : File's data was last modified n*24 hours ago

    (1) Numeric arguments can be specified as
       +n      for greater than n,
       -n      for less than n,
        n      for exactly n.

    (2) type
      -cmin -60 # creation time
      -mmin -60 # modification time
      -amin -60 # access time

# find . -mmin -60  --> whose content got updated within last 1 hour (60 minutes)
# find . -mtime -1  --> that got updated within the last 24 hours (1 day).
  (example) find . -mmin -60 -type f -exec ls -l {} \;


     (3) Differences
        find . -exec grep chrome {} \;
        find . -exec grep chrome {} +

        find will execute grep and will substitute {} with the filename(s) found.
        The difference between ; and + is that with ; a single grep command for each file is executed
        whereas with + as many files as possible are given as parameters to grep at once.


        In short,
        find . -exec grep foo {} + will show you output like this,   ./dir/file.py:from foo import bar
        find . -exec grep foo {} \; will show you output like this,  from foo import bar



1. Restricting the search only to unhidden files. (Do not display hidden files in find output)
=================================================
# find . -mtime -2 \( ! -regex ".*/\..*" \)  --> time: n*24 hours 



2. Finding the Top 5 Big Files
===============================
# find . -type f -exec ls -s {} \; | sort -n -r | head -5



3. Inverting the match
=======================
(1) List only the non-hidden empty files only in the current directory
# find . -maxdepth 1 -empty -not -name ".*"

(2) Shows the files or directories whose name are not MyCProgram.c under current directory
# find -maxdepth 1 -not -iname "MyCProgram.c"



4. Find files by Size - files bigger(+) than the given size
=====================
# find ~ -size +100M



5. Exclusion with Prune
========================
(1) including 'test' but exclude the files inside 'test' directory itself
$ find . -name test -prune

(2) same result with (1) but print others 
$ find . -name test -prune -o -print   (-o measn OR)

(3) list all other files except 'bgpd' and 'ospfd' directories and files including 'bgpd' and 'ospfd' strings
$ find . \( -name "bgpd*" -o -name "ospfd*" \) -prune -o -print



6. With application  
====================

(1) cscope & ctags
find ./ -name '*.[ch]' | ctags -R -L -
find ./ -name '*.[ch]' > cscope.files (or when you exclude something, use 'grep -v "something"')
 e.g., --> find ./ -name '*.[ch]' | grep -v 'test_install'
cscope -b

 <CAUTION>
 If vim cannot find headers or links, try to use physical path($PWD) instead of relative path(./) in 'find' command.


(2) diff & patch
find ./ -name '*.[ch]' -exec diff -wibuN {} ../0198-09-KH/{} \; > patch_09
find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec file {} \; | less

#practical example :  
    If there are two old-verion/  new-version/ directories,
    then "cd old-version" and command following line.

    find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec diff -wibuN {} ../new/{} \; > patch.diff
    diff --exclude=.p4config -uNR quagga/Makefile.am quagga-mpls/Makefile.am

 <CAUTION>
 if you just want to know what differences between orig and new(not patch purpose), just do diff without -N option. 
 Because -N option will generate lot's of new file lines unless either directory doesn't have same file.

#practical examples with Regular expression in Find
find -name "*.xls" -o -name "*.csv" ==  find -regex ".*\.\(xls\|csv\)"

#etc
find ./ -name "filename" | xargs command
