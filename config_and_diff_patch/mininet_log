

1. command capture
===================

(1) Popen  : from node.py(201)_popen()

['mnexec', '-cd', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:c0'] --> call subprocess
['mnexec', '-cdn', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:h1']
['mnexec', '-cdn', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:h2']
['mnexec', '-cd', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:s1']


(2) sendCmd : from node.py(286)sendCmd()

(<Controller c0: 127.0.0.1:6653 pid=10013> ,
 'unset HISTFILE; stty -echo; set +m')
 'echo A | telnet -e A 127.0.0.1 6653')
 'controller -v ptcp:6653 1>/tmp/c0.log 2>/tmp/c0.log &')


(<Host h1:  pid=10020> , 
 'unset HISTFILE; stty -echo; set +m')
 'ip link add name h1-eth0 address 6e:f6:7e:ae:bc:76 type veth peer name s1-eth1 address 3e:17:3c:c2:a7:ac netns 10029')
 'ifconfig h1-eth0 up')
 'ifconfig h1-eth0 10.0.0.1/8 up')
 'ifconfig lo up')
(<Host h1: h1-eth0:10.0.0.1 pid=10020> , 'ifconfig lo up', 'ping 10.0.0.2')



(<Host h2:  pid=10025> , 
 'unset HISTFILE; stty -echo; set +m')
 'ip link add name h2-eth0 address ee:dd:f2:db:8d:df type veth peer name s1-eth2 address 7a:ad:3f:10:6f:7a netns 10029')
 'ifconfig h2-eth0 up')
 'ifconfig h2-eth0 10.0.0.2/8 up')
 'ifconfig lo up')


(<OVSSwitch s1:  pid=10029> , 
 'unset HISTFILE; stty -echo; set +m')
 'ifconfig lo up')
 'ifconfig s1-eth1 up')
 'ifconfig s1-eth2 up')





(3) when ping 

  mininet> h1 ping h2
  > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(388)popen()
  (Pdb) p cmd
  ['mnexec', '-da', '10025', 'ifconfig', 'h2-eth0']


 From the above effect, it can be induced that "mnexec -da 10025 ifconfig h2-eth0" is the command to 
 connect virtual netdevice which was created by mininet like following example 

      kyehwanl@n4:~/ubuntu_test/download/mininet$ sudo ./mnexec -da 10025 ifconfig
      h2-eth0   Link encap:Ethernet  HWaddr ee:dd:f2:db:8d:df
                inet addr:10.0.0.2  Bcast:10.255.255.255  Mask:255.0.0.0
                inet6 addr: fe80::ecdd:f2ff:fedb:8ddf/64 Scope:Link
                UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
                RX packets:20 errors:0 dropped:0 overruns:0 frame:0
                TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
                collisions:0 txqueuelen:1000
                RX bytes:1576 (1.5 KB)  TX bytes:928 (928.0 B)

      lo        Link encap:Local Loopback
                inet addr:127.0.0.1  Mask:255.0.0.0
                inet6 addr: ::1/128 Scope:Host
                UP LOOPBACK RUNNING  MTU:65536  Metric:1
                RX packets:404 errors:0 dropped:0 overruns:0 frame:0
                TX packets:404 errors:0 dropped:0 overruns:0 carrier:0
                collisions:0 txqueuelen:0
                RX bytes:33936 (33.9 KB)  TX bytes:33936 (33.9 KB)

      kyehwanl@n4:~/ubuntu_test/download/mininet$ sudo ./mnexec -da 10025 ping -c 4 10.0.0.1
      PING 10.0.0.1 (10.0.0.1) 56(84) bytes of data.
      64 bytes from 10.0.0.1: icmp_seq=1 ttl=64 time=1.67 ms
      64 bytes from 10.0.0.1: icmp_seq=2 ttl=64 time=0.931 ms
      64 bytes from 10.0.0.1: icmp_seq=3 ttl=64 time=0.268 ms
      64 bytes from 10.0.0.1: icmp_seq=4 ttl=64 time=0.039 ms

      --- 10.0.0.1 ping statistics ---
      4 packets transmitted, 4 received, 0% packet loss, time 3002ms
      rtt min/avg/max/mdev = 0.039/0.729/1.678/0.638 ms
      kyehwanl@n4:~/ubuntu_test/download/mininet$ ^C




2. Debugging with pdb
=======================


(Pdb) restart
--------------------------------------------------------------------------------
Caught exception. Cleaning up...

Restart:
--------------------------------------------------------------------------------
*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
killall -9 controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
pkill -9 -f "sudo mnexec"
*** Removing junk from /tmp
rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.log
*** Removing old X11 tunnels
*** Removing excess kernel datapaths
ps ax | egrep -o 'dp[0-9]+' | sed 's/dp/nl:/'
***  Removing OVS datapaths
ovs-vsctl --timeout=1 list-br
ovs-vsctl --timeout=1 list-br
*** Removing all links of the pattern foo-ethX
ip link show | egrep -o '([-_.[:alnum:]]+-eth[[:digit:]]+)'
( ip link del s1-eth1;ip link del s1-eth2 ) 2> /dev/null
ip link show
*** Killing stale mininet node processes
pkill -9 -f mininet:
*** Shutting down stale tunnels
pkill -9 -f Tunnel=Ethernet
pkill -9 -f .ssh/mn
rm -f ~/.ssh/mn/*
*** Cleanup complete.
The program finished and will be restarted
> /usr/local/bin/mn(3)<module>()
-> __requires__ = 'mininet==2.3.0d1'
(Pdb) c
*** Creating network
*** Adding controller
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self.lastCmd
None
(Pdb) pp cmd
'unset HISTFILE; stty -echo; set +m'
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'echo A | telnet -e A 127.0.0.1 6653'
(Pdb) bt
  /usr/lib/python2.7/bdb.py(400)run()
-> exec cmd in globals, locals
  <string>(1)<module>()
  /usr/local/bin/mn(5)<module>()
-> pkg_resources.run_script('mininet==2.3.0d1', 'mn')
  /usr/lib/python2.7/dist-packages/pkg_resources.py(528)run_script()
-> self.require(requires)[0].run_script(script_name, ns)
  /usr/lib/python2.7/dist-packages/pkg_resources.py(1401)run_script()
-> exec(script_code, namespace, namespace)
  /usr/local/lib/python2.7/dist-packages/mininet-2.3.0d1-py2.7.egg/EGG-INFO/scripts/mn(410)<module>()
-> MininetRunner()
  /usr/local/lib/python2.7/dist-packages/mininet-2.3.0d1-py2.7.egg/EGG-INFO/scripts/mn(167)__init__()
-> self.begin()
  /usr/local/lib/python2.7/dist-packages/mininet-2.3.0d1-py2.7.egg/EGG-INFO/scripts/mn(384)begin()
-> listenPort=opts.listenport )
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(172)__init__()
-> self.build()
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(500)build()
-> self.buildFromTopo( self.topo )
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(467)buildFromTopo()
-> self.addController( 'c%d' % i, cls )
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(283)addController()
-> controller_new = controller( name, **params )
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(1376)__init__()
-> self.checkListening()
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(1387)checkListening()
-> ( self.ip, self.port ) )
  /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(355)cmd()
-> self.sendCmd( *args, **kwargs )
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'echo A | telnet -e A 127.0.0.1 6653'
(Pdb) c
*** Adding hosts:
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'unset HISTFILE; stty -echo; set +m'
(Pdb) c
h1 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'unset HISTFILE; stty -echo; set +m'
(Pdb) c
h2
*** Adding switches:
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'unset HISTFILE; stty -echo; set +m'
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p cmd
'ifconfig lo up'
(Pdb) p self.lastCmd
'unset HISTFILE; stty -echo; set +m'
(Pdb) c
s1
*** Adding links:
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p self.lastCmd, cmd
('unset HISTFILE; stty -echo; set +m', 'ip link add name h1-eth0 address 4e:cb:95:32:c2:4a type veth peer name s1-eth1 address 0a:e1:2d:76:27:0b netns 12264')
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p self.lastCmd, cmd
('ifconfig lo up', 'ifconfig s1-eth1 up')
(Pdb) c
(h1, s1) > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) p self.lastCmd, cmd
('unset HISTFILE; stty -echo; set +m', 'ip link add name h2-eth0 address 0a:bc:c6:47:48:07 type veth peer name s1-eth2 address c2:10:87:ad:7e:48 netns 12264')
(Pdb) pp self, self.lastCmd, cmd
(<Host h2:  pid=12260> ,
 'unset HISTFILE; stty -echo; set +m',
 'ip link add name h2-eth0 address 0a:bc:c6:47:48:07 type veth peer name s1-eth2 address c2:10:87:ad:7e:48 netns 12264')
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:None pid=12260> ,
 'ip link add name h2-eth0 address 0a:bc:c6:47:48:07 type veth peer name s1-eth2 address c2:10:87:ad:7e:48 netns 12264',
 'ifconfig h2-eth0 up')
(Pdb)
(<Host h2: h2-eth0:None pid=12260> ,
 'ip link add name h2-eth0 address 0a:bc:c6:47:48:07 type veth peer name s1-eth2 address c2:10:87:ad:7e:48 netns 12264',
 'ifconfig h2-eth0 up')
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=12264> ,
 'ifconfig s1-eth1 up',
 'ifconfig s1-eth2 up')
(Pdb) c
(h2, s1)
*** Configuring hosts
h1 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=12256> ,
 'ifconfig h1-eth0 up',
 'ifconfig h1-eth0 10.0.0.1/8 up')
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=12256> ,
 'ifconfig h1-eth0 10.0.0.1/8 up',
 'ifconfig lo up')
(Pdb) c
h2 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=12260> ,
 'ifconfig h2-eth0 up',
 'ifconfig h2-eth0 10.0.0.2/8 up')
(Pdb) c
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=12260> ,
 'ifconfig h2-eth0 10.0.0.2/8 up',
 'ifconfig lo up')
(Pdb) c

*** Starting controller
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(540)start()
-> for controller in self.controllers:
(Pdb) pp self, self.lastCmd, cmd
*** AttributeError: AttributeError("'Mininet' object has no attribute 'lastCmd'",)
(Pdb) l
535         def start( self ):
536             "Start controller and switches."
537             if not self.built:
538                 self.build()
539             info( '*** Starting controller\n' )
540 B->         for controller in self.controllers:
541                 info( controller.name + ' ')
542                 controller.start()
543             info( '\n' )
544             info( '*** Starting %s switches\n' % len( self.switches ) )
545             for switch in self.switches:
(Pdb) b
Num Type         Disp Enb   Where
1   breakpoint   keep no    at /usr/lib/python2.7/dist-packages/pkg_resources.py:1401
        breakpoint already hit 2 times
2   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:487
        breakpoint already hit 4 times
3   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:490
4   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/link.py:54
        breakpoint already hit 4 times
5   breakpoint   keep yes   at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:540
        breakpoint already hit 2 times
6   breakpoint   keep yes   at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py:286
        breakpoint already hit 16 times
(Pdb) disable 5
(Pdb) c
c0 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=12246> ,
 'echo A | telnet -e A 127.0.0.1 6653',
 'controller -v ptcp:6653 1>/tmp/c0.log 2>/tmp/c0.log &')
(Pdb) c

*** Starting 1 switches
s1 ...
*** Starting CLI:
mininet> ping h1
*** Unknown command: ping h1
mininet> h1 ping h2
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=12256> , 'ifconfig lo up', 'ping 10.0.0.2')
(Pdb) c
PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=2.92 ms
64 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.461 ms
64 bytes from 10.0.0.2: icmp_seq=3 ttl=64 time=0.032 ms
^C
--- 10.0.0.2 ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2000ms
rtt min/avg/max/mdev = 0.032/1.139/2.924/1.274 ms
mininet> h1 ping h2
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.lastCmd = cmd
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=12256> , 'ping 10.0.0.2', 'ping 10.0.0.2')
(Pdb) b
Num Type         Disp Enb   Where
1   breakpoint   keep no    at /usr/lib/python2.7/dist-packages/pkg_resources.py:1401
        breakpoint already hit 2 times
2   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:487
        breakpoint already hit 4 times
3   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:490
4   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/link.py:54
        breakpoint already hit 4 times
5   breakpoint   keep no    at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:540
        breakpoint already hit 2 times
6   breakpoint   keep yes   at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/node.py:286
        breakpoint already hit 19 times
(Pdb) disable 6
(Pdb) b /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:544
Breakpoint 7 at /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py:544
(Pdb) restart
--------------------------------------------------------------------------------
Caught exception. Cleaning up...

Restart:
--------------------------------------------------------------------------------
*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
killall -9 controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
pkill -9 -f "sudo mnexec"
*** Removing junk from /tmp
rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.log
*** Removing old X11 tunnels
*** Removing excess kernel datapaths
ps ax | egrep -o 'dp[0-9]+' | sed 's/dp/nl:/'
***  Removing OVS datapaths
ovs-vsctl --timeout=1 list-br
ovs-vsctl --if-exists del-br s1
ovs-vsctl --timeout=1 list-br
*** Removing all links of the pattern foo-ethX
ip link show | egrep -o '([-_.[:alnum:]]+-eth[[:digit:]]+)'
( ip link del s1-eth1;ip link del s1-eth2 ) 2> /dev/null
ip link show
*** Killing stale mininet node processes
pkill -9 -f mininet:
*** Shutting down stale tunnels
pkill -9 -f Tunnel=Ethernet
pkill -9 -f .ssh/mn
rm -f ~/.ssh/mn/*
*** Cleanup complete.
The program finished and will be restarted
> /usr/local/bin/mn(3)<module>()
-> __requires__ = 'mininet==2.3.0d1'
(Pdb) c
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2
*** Adding switches:
s1
*** Adding links:
(h1, s1) (h2, s1)
*** Configuring hosts
h1 h2
*** Starting controller
c0
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(544)start()
-> info( '*** Starting %s switches\n' % len( self.switches ) )
(Pdb) n
*** Starting 1 switches
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(545)start()
-> for switch in self.switches:
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(546)start()
-> info( switch.name + ' ')
(Pdb)
s1 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(547)start()
-> switch.start( self.controllers )
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(545)start()
-> for switch in self.switches:
(Pdb) n
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(548)start()
-> started = {}
(Pdb) n
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(549)start()
-> for swclass, switches in groupby(
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(550)start()
-> sorted( self.switches, key=type ), type ):
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(551)start()
-> switches = tuple( switches )
(Pdb) p switches
<itertools._grouper object at 0x7fa84fb02290>
(Pdb) n
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(552)start()
-> if hasattr( swclass, 'batchStartup' ):
(Pdb) p switches
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=31126> ,)
(Pdb) n
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(553)start()
-> success = swclass.batchStartup( switches )
(Pdb) n
...> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(554)start()
-> started.update( { s: s for s in success } )
(Pdb) restart
--------------------------------------------------------------------------------
Caught exception. Cleaning up...

Restart:
--------------------------------------------------------------------------------
*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
killall -9 controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2> /dev/null
pkill -9 -f "sudo mnexec"
*** Removing junk from /tmp
rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.log
*** Removing old X11 tunnels
*** Removing excess kernel datapaths
ps ax | egrep -o 'dp[0-9]+' | sed 's/dp/nl:/'
***  Removing OVS datapaths
ovs-vsctl --timeout=1 list-br
ovs-vsctl --if-exists del-br s1
ovs-vsctl --timeout=1 list-br
*** Removing all links of the pattern foo-ethX
ip link show | egrep -o '([-_.[:alnum:]]+-eth[[:digit:]]+)'
( ip link del s1-eth1;ip link del s1-eth2 ) 2> /dev/null
ip link show
*** Killing stale mininet node processes
pkill -9 -f mininet:
*** Shutting down stale tunnels
pkill -9 -f Tunnel=Ethernet
pkill -9 -f .ssh/mn
rm -f ~/.ssh/mn/*
*** Cleanup complete.
The program finished and will be restarted
> /usr/local/bin/mn(3)<module>()
-> __requires__ = 'mininet==2.3.0d1'
(Pdb) c
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2
*** Adding switches:
s1
*** Adding links:
(h1, s1) (h2, s1)
*** Configuring hosts
h1 h2
*** Starting controller
c0
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(544)start()
-> info( '*** Starting %s switches\n' % len( self.switches ) )
(Pdb) n
*** Starting 1 switches
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(545)start()
-> for switch in self.switches:
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(546)start()
-> info( switch.name + ' ')
(Pdb)
s1 > /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(547)start()
-> switch.start( self.controllers )
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(545)start()
-> for switch in self.switches:
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(548)start()
-> started = {}
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(549)start()
-> for swclass, switches in groupby(
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(550)start()
-> sorted( self.switches, key=type ), type ):
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(551)start()
-> switches = tuple( switches )
(Pdb)
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(552)start()
-> if hasattr( swclass, 'batchStartup' ):
(Pdb) p swclass
<class 'mininet.node.OVSSwitch'>
(Pdb) n
> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/net.py(553)start()
-> success = swclass.batchStartup( switches )
(Pdb)




(Pdb) c
*** Starting 1 switches
s1 ...> /users/kyehwanl/build/bdist.linux-x86_64/egg/mininet/util.py(83)errRun()
-> popen = Popen( cmd, stdout=PIPE, stderr=stderr, shell=shell )
(Pdb) pp cmd
ovs-vsctl -- --id=@s1c0 create Controller target=\\"tcp:127.0.0.1:6653\\" max_backoff=1000 -- --id=@s1-listen create Controller target=\\"ptcp:6654\\" max_backoff=1000 -- --if-exists del-br s1 -- add-br s1 -- set bridge s1 controller=[@s1c0,@s1-listen] other_config:datapath-id=0000000000000001 fail_mode=secure other-config:disable-in-band=true -- add-port s1 s1-eth1 -- set Interface s1-eth1 ofport_request=1 -- add-port s1 s1-eth2 -- set Interface s1-eth2 ofport_request=2



kyehwanl@n4:~/ubuntu_test/download/mininet$ sudo ovs-vsctl show
f0a92b5a-797c-4301-9786-28e2c870cf80
    Bridge "s1"
        Controller "ptcp:6654"
        Controller "tcp:127.0.0.1:6653"
            is_connected: true
        fail_mode: secure
        Port "s1-eth2"
            Interface "s1-eth2"
        Port "s1"
            Interface "s1"
                type: internal
        Port "s1-eth1"
            Interface "s1-eth1"
    ovs_version: "2.0.2"












3. debugging pdb for command history
====================================



kyehwanl@n4:~/ubuntu_test/download/mininet/bin$ ll
total 18K
-rwxr-xr-x 1 kyehwanl bgp-srx 17K Sep 22 11:16 mn*
kyehwanl@n4:~/ubuntu_test/download/mininet/bin$ sudo pdb mn
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(12)<module>()
-> """
(Pdb) l
  7     To see options:
  8       sudo mn -h
  9
 10     Example to pull custom params (topo, switch, etc.) from a file:
 11       sudo mn --custom ~/mininet/custom/custom_example.py
 12  -> """
 13
 14     from optparse import OptionParser
 15     import os
 16     import sys
 17     import time
(Pdb) b 167
Breakpoint 1 at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:167
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(167)__init__()
-> self.begin()
(Pdb) s
--Call--
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(312)begin()
-> def begin( self ):
(Pdb) l
307             lg.setLogLevel( self.options.verbosity )
308
309         # Maybe we'll reorganize this someday...
310         # pylint: disable=too-many-branches,too-many-statements
311
312  ->     def begin( self ):
313             "Create and run mininet."
314
315             opts = self.options
316
317             if opts.cluster:
(Pdb)
318                 servers = opts.cluster.split( ',' )
319                 for server in servers:
320                     ClusterCleanup.add( server )
321
322             if opts.clean:
323                 cleanup()
324                 exit()
325
326             start = time.time()
327
328             if not opts.controller:
(Pdb)
329                 # Update default based on available controllers
330                 CONTROLLERS[ 'default' ] = findController()
331                 opts.controller = [ 'default' ]
332                 if not CONTROLLERS[ 'default' ]:
333                     opts.controller = [ 'none' ]
334                     if opts.switch == 'default':
335                         info( '*** No default OpenFlow controller found '
336                               'for default switch!\n' )
337                         info( '*** Falling back to OVS Bridge\n' )
338                         opts.switch = 'ovsbr'
339                     elif opts.switch not in ( 'ovsbr', 'lxbr' ):
(Pdb)
340                         raise Exception( "Could not find a default controller "
341                                          "for switch %s" %
342                                          opts.switch )
343
344
345
346             topo = buildTopo( TOPOS, opts.topo )
347             switch = customClass( SWITCHES, opts.switch )
348             host = customClass( HOSTS, opts.host )
349             controller = [ customClass( CONTROLLERS, c )
350                            for c in opts.controller ]
(Pdb) b buildTopo
End of file
(Pdb) b 346
Breakpoint 2 at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:346
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(346)begin()
-> topo = buildTopo( TOPOS, opts.topo )
(Pdb) s
--Call--
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/util.py(576)buildTopo()
-> def buildTopo( topos, topoStr ):
(Pdb) l
571
572         CustomClass.__name__ = '%s%s' % ( cls.__name__, defaults )
573         return CustomClass
574
575
576  -> def buildTopo( topos, topoStr ):
577         """Create topology from string with format (object, arg1, arg2,...).
578         input topos is a dict of topo names to constructors, possibly w/args.
579         """
580         topo, args, kwargs = splitArgs( topoStr )
581         if topo not in topos:
(Pdb)
582             raise Exception( 'Invalid topo name %s' % topo )
583         return topos[ topo ]( *args, **kwargs )
584
585     def ensureRoot():
586         """Ensure that we are running as root.
587
588         Probably we should only sudo when needed as per Big Switch's patch.
589         """
590         if os.getuid() != 0:
591             print( "*** Mininet must run as root." )
592             exit( 1 )
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/util.py:583
Breakpoint 3 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/util.py:583
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/util.py(583)buildTopo()
-> return topos[ topo ]( *args, **kwargs )
(Pdb) cl 3
Deleted breakpoint 3
(Pdb) return
--Return--
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/util.py(583)buildTopo()-><mininet...4a438e10>
-> return topos[ topo ]( *args, **kwargs )
(Pdb) n
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(347)begin()
-> switch = customClass( SWITCHES, opts.switch )
(Pdb) b 380
Breakpoint 4 at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:380
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(380)begin()
-> switch=switch, host=host, controller=controller, link=link,
(Pdb) s
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(381)begin()
-> ipBase=opts.ipbase, inNamespace=opts.innamespace,
(Pdb)
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(382)begin()
-> xterms=opts.xterms, autoSetMacs=opts.mac,
(Pdb)
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(383)begin()
-> autoStaticArp=opts.arp, autoPinCpus=opts.pin,
(Pdb)
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(384)begin()
-> listenPort=opts.listenport )
(Pdb)
--Call--
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/net.py(116)__init__()
-> def __init__( self, topo=None, switch=OVSKernelSwitch, host=Host,
(Pdb) l
111     VERSION = "2.3.0d1"
112
113     class Mininet( object ):
114         "Network emulation with hosts spawned in network namespaces."
115
116  ->     def __init__( self, topo=None, switch=OVSKernelSwitch, host=Host,
117                       controller=DefaultController, link=Link, intf=Intf,
118                       build=True, xterms=False, cleanup=False, ipBase='10.0.0.0/8',
119                       inNamespace=False,
120                       autoSetMacs=False, autoStaticArp=False, autoPinCpus=False,
121                       listenPort=None, waitConnected=False ):
(Pdb) b sendCmd
*** The specified object 'sendCmd' is not a function
or was not found along sys.path.
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:286
Breakpoint 5 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:286
(Pdb) c
*** Creating network
*** Adding controller
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) l
281             if not isinstance( cmd, str ):
282                 cmd = ' '.join( [ str( c ) for c in cmd ] )
283             if not re.search( r'\w', cmd ):
284                 # Replace empty commands with something harmless
285                 cmd = 'echo -n'
286 B->         self.lastCmd = cmd
287             # if a builtin command is backgrounded, it still yields a PID
288             if len( cmd ) > 0 and cmd[ -1 ] == '&':
289                 # print ^A{pid}\n so monitor() can set lastPid
290                 cmd += ' printf "\\001%d\\012" $! '
291             elif printPid and not isShellBuiltin( cmd ):
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=9307> ,
 None,
 'unset HISTFILE; stty -echo; set +m')
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/term.py:57
Breakpoint 6 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/term.py:57
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=9307> ,
 'unset HISTFILE; stty -echo; set +m',
 'echo A | telnet -e A 127.0.0.1 6653')
(Pdb) c
*** Adding hosts:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1:  pid=9329> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) pp self, self.lastCmd, cmd
(<Host h1:  pid=9329> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
h1 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2:  pid=9333> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
h2
*** Adding switches:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1:  pid=9344> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:715
Breakpoint 7 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:715
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1 pid=9344> ,
 'unset HISTFILE; stty -echo; set +m',
 'ifconfig lo up')
(Pdb) c
s1
*** Adding links:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1:  pid=9329> ,
 'unset HISTFILE; stty -echo; set +m',
 'ip link add name h1-eth0 address 0e:1f:10:3a:7e:69 type veth peer name s1-eth1 address 82:d7:9c:24:b1:a4 netns 9344')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:None pid=9329> ,
 'ip link add name h1-eth0 address 0e:1f:10:3a:7e:69 type veth peer name s1-eth1 address 82:d7:9c:24:b1:a4 netns 9344',
 'ifconfig h1-eth0 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None pid=9344> ,
 'ifconfig lo up',
 'ifconfig s1-eth1 up')
(Pdb) c
(h1, s1) > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2:  pid=9333> ,
 'unset HISTFILE; stty -echo; set +m',
 'ip link add name h2-eth0 address 82:35:a9:b8:e4:9f type veth peer name s1-eth2 address 4e:8f:64:07:66:cf netns 9344')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:None pid=9333> ,
 'ip link add name h2-eth0 address 82:35:a9:b8:e4:9f type veth peer name s1-eth2 address 4e:8f:64:07:66:cf netns 9344',
 'ifconfig h2-eth0 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=9344> ,
 'ifconfig s1-eth1 up',
 'ifconfig s1-eth2 up')
(Pdb) c
(h2, s1)
*** Configuring hosts
h1 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> ,
 'ifconfig h1-eth0 up',
 'ifconfig h1-eth0 10.0.0.1/8 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> ,
 'ifconfig h1-eth0 10.0.0.1/8 up',
 'ifconfig lo up')
(Pdb) c
h2 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=9333> ,
 'ifconfig h2-eth0 up',
 'ifconfig h2-eth0 10.0.0.2/8 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=9333> ,
 'ifconfig h2-eth0 10.0.0.2/8 up',
 'ifconfig lo up')
(Pdb) c

*** Starting controller
c0 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=9307> ,
 'echo A | telnet -e A 127.0.0.1 6653',
 'controller -v ptcp:6653 1>/tmp/c0.log 2>/tmp/c0.log &')
(Pdb) c

*** Starting 1 switches
s1 ...
*** Starting CLI:
mininet> h1 xterm
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) l
281             if not isinstance( cmd, str ):
282                 cmd = ' '.join( [ str( c ) for c in cmd ] )
283             if not re.search( r'\w', cmd ):
284                 # Replace empty commands with something harmless
285                 cmd = 'echo -n'
286 B->         self.lastCmd = cmd
287             # if a builtin command is backgrounded, it still yields a PID
288             if len( cmd ) > 0 and cmd[ -1 ] == '&':
289                 # print ^A{pid}\n so monitor() can set lastPid
290                 cmd += ' printf "\\001%d\\012" $! '
291             elif printPid and not isShellBuiltin( cmd ):
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> , 'ifconfig lo up', 'xterm')
(Pdb) c
Warning: This program is an suid-root program or is being run by the root user.
The full text of the error or warning message cannot be safely formatted
in this environment. You may get a more descriptive message by running the
program as a non-root user or by removing the suid bit on the executable.
xterm: Xt error: Can't open display: %s
mininet> h1 xterm
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> , 'xterm', 'xterm')
(Pdb) c
Warning: This program is an suid-root program or is being run by the root user.
The full text of the error or warning message cannot be safely formatted
in this environment. You may get a more descriptive message by running the
program as a non-root user or by removing the suid bit on the executable.
xterm: Xt error: Can't open display: %s
mininet> h1 export DISPLAY=localhost:10.0
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) c
mininet> h1 xterm
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> ,
 'export DISPLAY=localhost:10.0',
 'xterm')
(Pdb) c
Warning: This program is an suid-root program or is being run by the root user.
The full text of the error or warning message cannot be safely formatted
in this environment. You may get a more descriptive message by running the
program as a non-root user or by removing the suid bit on the executable.
xterm: Xt error: Can't open display: %s
mininet> exit
*** Stopping 1 controllers
c0 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:201
Breakpoint 8 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:201
(Pdb) b /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:386
Breakpoint 9 at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:386
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=9307> ,
 'kill %controller',
 'wait %controller')
(Pdb) c

*** Stopping 2 links
.> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=9329> , 'xterm', 'ip link del h1-eth0')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=9344> ,
 'ifconfig s1-eth2 up',
 'ip link del s1-eth1')
(Pdb) c
.> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=9333> ,
 'ifconfig lo up',
 'ip link del h2-eth0')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth2:None pid=9344> ,
 'ip link del s1-eth1',
 'ip link del s1-eth2')
(Pdb) c

*** Stopping 1 switches
s1
*** Stopping 2 hosts
h1 h2
*** Done
completed in 1351.376 seconds
The program finished and will be restarted
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(12)<module>()
-> """
(Pdb) restart
Restarting mn with arguments:

> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(12)<module>()
-> """
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(167)__init__()
-> self.begin()
(Pdb) b
Num Type         Disp Enb   Where
1   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:167
        breakpoint already hit 2 times
2   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:346
        breakpoint already hit 1 time
4   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/mn:380
        breakpoint already hit 1 time
5   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:286
        breakpoint already hit 27 times
6   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/term.py:57
7   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:715
8   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:201
9   breakpoint   keep yes   at /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py:386
(Pdb) bt
  /usr/lib/python2.7/bdb.py(400)run()
-> exec cmd in globals, locals
  <string>(1)<module>()
  /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(410)<module>()
-> MininetRunner()
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(167)__init__()
-> self.begin()
(Pdb) cl 1
Deleted breakpoint 1
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(346)begin()
-> topo = buildTopo( TOPOS, opts.topo )
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/mn(380)begin()
-> switch=switch, host=host, controller=controller, link=link,
(Pdb) cl 2
Deleted breakpoint 2
(Pdb) c
*** Creating network
*** Adding controller
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(201)_popen()
-> remaining.remove( switch )
(Pdb) l
196             """Internal method: spawn and return a process
197                 cmd: command to run (list)
198                 params: parameters to Popen()"""
199             # Leave this is as an instance method for now
200             assert self
201 B->         return Popen( cmd, **params )
202
203         def cleanup( self ):
204             "Help python collect its garbage."
205             # We used to do this, but it slows us down:
206             # Intfs may end up in root NS
(Pdb) pp cmd
['mnexec', '-cd', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:c0']
(Pdb) s
--Call--
> /usr/lib/python2.7/subprocess.py(650)__init__()
-> def __init__(self, args, bufsize=0, executable=None,
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) l
281             if not isinstance( cmd, str ):
282                 cmd = ' '.join( [ str( c ) for c in cmd ] )
283             if not re.search( r'\w', cmd ):
284                 # Replace empty commands with something harmless
285                 cmd = 'echo -n'
286 B->         self.lastCmd = cmd
287             # if a builtin command is backgrounded, it still yields a PID
288             if len( cmd ) > 0 and cmd[ -1 ] == '&':
289                 # print ^A{pid}\n so monitor() can set lastPid
290                 cmd += ' printf "\\001%d\\012" $! '
291             elif printPid and not isShellBuiltin( cmd ):
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=10013> ,
 None,
 'unset HISTFILE; stty -echo; set +m')
(Pdb)
(<Controller c0: 127.0.0.1:6653 pid=10013> ,
 None,
 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) l
281             if not isinstance( cmd, str ):
282                 cmd = ' '.join( [ str( c ) for c in cmd ] )
283             if not re.search( r'\w', cmd ):
284                 # Replace empty commands with something harmless
285                 cmd = 'echo -n'
286 B->         self.lastCmd = cmd
287             # if a builtin command is backgrounded, it still yields a PID
288             if len( cmd ) > 0 and cmd[ -1 ] == '&':
289                 # print ^A{pid}\n so monitor() can set lastPid
290                 cmd += ' printf "\\001%d\\012" $! '
291             elif printPid and not isShellBuiltin( cmd ):
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=10013> ,
 'unset HISTFILE; stty -echo; set +m',
 'echo A | telnet -e A 127.0.0.1 6653')
(Pdb) c
*** Adding hosts:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(201)_popen()
-> remaining.remove( switch )
(Pdb) pp cmd
['mnexec', '-cdn', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:h1']
(Pdb) l
196             """Internal method: spawn and return a process
197                 cmd: command to run (list)
198                 params: parameters to Popen()"""
199             # Leave this is as an instance method for now
200             assert self
201 B->         return Popen( cmd, **params )
202
203         def cleanup( self ):
204             "Help python collect its garbage."
205             # We used to do this, but it slows us down:
206             # Intfs may end up in root NS
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1:  pid=10020> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
h1 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(201)_popen()
-> remaining.remove( switch )
(Pdb) pp cmd
['mnexec', '-cdn', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:h2']
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2:  pid=10025> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
h2
*** Adding switches:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(201)_popen()
-> remaining.remove( switch )
(Pdb) pp cmd
['mnexec', '-cd', 'env', 'PS1=\x7f', 'bash', '--norc', '-is', 'mininet:s1']
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1:  pid=10029> , None, 'unset HISTFILE; stty -echo; set +m')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1 pid=10029> ,
 'unset HISTFILE; stty -echo; set +m',
 'ifconfig lo up')
(Pdb) c
s1
*** Adding links:
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1:  pid=10020> ,
 'unset HISTFILE; stty -echo; set +m',
 'ip link add name h1-eth0 address 6e:f6:7e:ae:bc:76 type veth peer name s1-eth1 address 3e:17:3c:c2:a7:ac netns 10029')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:None pid=10020> ,
 'ip link add name h1-eth0 address 6e:f6:7e:ae:bc:76 type veth peer name s1-eth1 address 3e:17:3c:c2:a7:ac netns 10029',
 'ifconfig h1-eth0 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None pid=10029> ,
 'ifconfig lo up',
 'ifconfig s1-eth1 up')
(Pdb) c
(h1, s1) > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2:  pid=10025> ,
 'unset HISTFILE; stty -echo; set +m',
 'ip link add name h2-eth0 address ee:dd:f2:db:8d:df type veth peer name s1-eth2 address 7a:ad:3f:10:6f:7a netns 10029')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:None pid=10025> ,
 'ip link add name h2-eth0 address ee:dd:f2:db:8d:df type veth peer name s1-eth2 address 7a:ad:3f:10:6f:7a netns 10029',
 'ifconfig h2-eth0 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<OVSSwitch s1: lo:127.0.0.1,s1-eth1:None,s1-eth2:None pid=10029> ,
 'ifconfig s1-eth1 up',
 'ifconfig s1-eth2 up')
(Pdb) c
(h2, s1)
*** Configuring hosts
h1 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=10020> ,
 'ifconfig h1-eth0 up',
 'ifconfig h1-eth0 10.0.0.1/8 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=10020> ,
 'ifconfig h1-eth0 10.0.0.1/8 up',
 'ifconfig lo up')
(Pdb) c
h2 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=10025> ,
 'ifconfig h2-eth0 up',
 'ifconfig h2-eth0 10.0.0.2/8 up')
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h2: h2-eth0:10.0.0.2 pid=10025> ,
 'ifconfig h2-eth0 10.0.0.2/8 up',
 'ifconfig lo up')
(Pdb) c

*** Starting controller
c0 > /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Controller c0: 127.0.0.1:6653 pid=10013> ,
 'echo A | telnet -e A 127.0.0.1 6653',
 'controller -v ptcp:6653 1>/tmp/c0.log 2>/tmp/c0.log &')
(Pdb) c

*** Starting 1 switches
s1 ...
*** Starting CLI:
mininet> h1 ping h2
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(386)popen()
-> options = dict( params )
(Pdb) l
381                     raise Exception( 'popen() requires a string or list' )
382             elif len( args ) > 0:
383                 # popen( cmd, arg1, arg2... )
384                 cmd = list( args )
385             # Attach to our namespace  using mnexec -a
386 B->         cmd = defaults.pop( 'mncmd' ) + cmd
387             # Shell requires a string, not a list!
388             if defaults.get( 'shell', False ):
389                 cmd = ' '.join( cmd )
390             popen = self._popen( cmd, **defaults )
391             return popen
(Pdb) pp cmd
['ifconfig', 'h2-eth0']
(Pdb) n
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(388)popen()
-> if port1 is not None:
(Pdb) p cmd
['mnexec', '-da', '10025', 'ifconfig', 'h2-eth0']
(Pdb) n
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(390)popen()
-> if port2 is not None:
(Pdb)
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(201)_popen()
-> remaining.remove( switch )
(Pdb) p cmd
['mnexec', '-da', '10025', 'ifconfig', 'h2-eth0']
(Pdb) c
> /users/kyehwanl/ubuntu_test/download/mininet/bin/build/bdist.linux-x86_64/egg/mininet/node.py(286)sendCmd()
-> self.controllers.append( controller_new )
(Pdb) pp self, self.lastCmd, cmd
(<Host h1: h1-eth0:10.0.0.1 pid=10020> , 'ifconfig lo up', 'ping 10.0.0.2')
(Pdb) c
PING 10.0.0.2 (10.0.0.2) 56(84) bytes of data.
64 bytes from 10.0.0.2: icmp_seq=1 ttl=64 time=2.97 ms
64 bytes from 10.0.0.2: icmp_seq=2 ttl=64 time=0.410 ms
^C
--- 10.0.0.2 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1001ms
rtt min/avg/max/mdev = 0.410/1.690/2.971/1.281 ms
mininet>
