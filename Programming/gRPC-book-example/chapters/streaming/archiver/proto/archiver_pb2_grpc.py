# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import archiver_pb2 as proto_dot_archiver__pb2


class ArchiverStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Zip = channel.stream_unary(
        '/practical.grpc.v1.Archiver/Zip',
        request_serializer=proto_dot_archiver__pb2.ZipRequest.SerializeToString,
        response_deserializer=proto_dot_archiver__pb2.ZipResponse.FromString,
        )


class ArchiverServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Zip(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArchiverServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Zip': grpc.stream_unary_rpc_method_handler(
          servicer.Zip,
          request_deserializer=proto_dot_archiver__pb2.ZipRequest.FromString,
          response_serializer=proto_dot_archiver__pb2.ZipResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'practical.grpc.v1.Archiver', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
