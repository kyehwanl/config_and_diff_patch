// Code generated by protoc-gen-go. DO NOT EDIT.
// source: json_db.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DB struct {
	Films     []*Film     `protobuf:"bytes,1,rep,name=films" json:"films,omitempty"`
	People    []*Person   `protobuf:"bytes,2,rep,name=people" json:"people,omitempty"`
	Planets   []*Planet   `protobuf:"bytes,3,rep,name=planets" json:"planets,omitempty"`
	Species   []*Species  `protobuf:"bytes,4,rep,name=species" json:"species,omitempty"`
	Starships []*Starship `protobuf:"bytes,5,rep,name=starships" json:"starships,omitempty"`
	Vehicles  []*Vehicle  `protobuf:"bytes,6,rep,name=vehicles" json:"vehicles,omitempty"`
}

func (m *DB) Reset()                    { *m = DB{} }
func (m *DB) String() string            { return proto1.CompactTextString(m) }
func (*DB) ProtoMessage()               {}
func (*DB) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *DB) GetFilms() []*Film {
	if m != nil {
		return m.Films
	}
	return nil
}

func (m *DB) GetPeople() []*Person {
	if m != nil {
		return m.People
	}
	return nil
}

func (m *DB) GetPlanets() []*Planet {
	if m != nil {
		return m.Planets
	}
	return nil
}

func (m *DB) GetSpecies() []*Species {
	if m != nil {
		return m.Species
	}
	return nil
}

func (m *DB) GetStarships() []*Starship {
	if m != nil {
		return m.Starships
	}
	return nil
}

func (m *DB) GetVehicles() []*Vehicle {
	if m != nil {
		return m.Vehicles
	}
	return nil
}

func init() {
	proto1.RegisterType((*DB)(nil), "sfapi.v1.DB")
}

func init() { proto1.RegisterFile("json_db.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0xcb, 0x4a, 0xc5, 0x30,
	0x10, 0x80, 0x61, 0xec, 0xb1, 0x17, 0xa7, 0x28, 0x3a, 0xab, 0xe0, 0x4a, 0xc4, 0x45, 0x51, 0x0c,
	0x5e, 0xde, 0xa0, 0x88, 0x6b, 0x89, 0xe0, 0xc2, 0x8d, 0xb4, 0x75, 0x4a, 0x23, 0x69, 0x13, 0x3a,
	0xa5, 0x8f, 0xe1, 0x33, 0x0b, 0x49, 0x6b, 0xc5, 0xb3, 0x4a, 0x98, 0xff, 0x63, 0x16, 0x03, 0xc7,
	0x5f, 0x6c, 0x87, 0x8f, 0xcf, 0x5a, 0xba, 0xd1, 0x4e, 0x16, 0x33, 0x6e, 0x2b, 0xa7, 0xe5, 0x7c,
	0x7f, 0x9e, 0x87, 0x9f, 0x1f, 0x5f, 0x7e, 0x47, 0x10, 0x3d, 0x95, 0x78, 0x05, 0x71, 0xab, 0x4d,
	0xcf, 0xe2, 0xe0, 0x62, 0x57, 0xe4, 0x0f, 0x27, 0x72, 0xd5, 0xf2, 0x59, 0x9b, 0x5e, 0x85, 0x88,
	0x05, 0x24, 0x8e, 0xac, 0x33, 0x24, 0x22, 0xcf, 0x4e, 0x37, 0xf6, 0x42, 0x23, 0xdb, 0x41, 0x2d,
	0x1d, 0xaf, 0x21, 0x75, 0xa6, 0x1a, 0x68, 0x62, 0xb1, 0xdb, 0xa3, 0x3e, 0xa8, 0x15, 0xe0, 0x0d,
	0xa4, 0xec, 0xa8, 0xd1, 0xc4, 0xe2, 0xd0, 0xdb, 0xb3, 0xcd, 0xbe, 0x86, 0xa0, 0x56, 0x81, 0x77,
	0x70, 0xc4, 0x53, 0x35, 0x72, 0xa7, 0x1d, 0x8b, 0xd8, 0x73, 0xfc, 0xc3, 0x97, 0xa4, 0x36, 0x84,
	0xb7, 0x90, 0xcd, 0xd4, 0xe9, 0xc6, 0x10, 0x8b, 0xe4, 0xff, 0xfe, 0xb7, 0x50, 0xd4, 0x2f, 0x29,
	0xd3, 0xf7, 0xd8, 0x5f, 0xa6, 0x4e, 0xfc, 0xf3, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x91,
	0xdd, 0x5d, 0x48, 0x01, 0x00, 0x00,
}
