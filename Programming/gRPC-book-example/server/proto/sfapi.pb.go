// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sfapi.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	sfapi.proto
	json_db.proto

It has these top-level messages:
	Film
	GetFilmRequest
	GetFilmResponse
	ListFilmsRequest
	ListFilmsResponse
	Vehicle
	GetVehicleRequest
	GetVehicleResponse
	ListVehiclesRequest
	ListVehiclesResponse
	Starship
	GetStarshipRequest
	GetStarshipResponse
	ListStarshipsRequest
	ListStarshipsResponse
	Species
	GetSpeciesRequest
	GetSpeciesResponse
	ListSpeciesRequest
	ListSpeciesResponse
	Planet
	GetPlanetRequest
	GetPlanetResponse
	ListPlanetsRequest
	ListPlanetsResponse
	Person
	GetPersonRequest
	GetPersonResponse
	ListPeopleRequest
	ListPeopleResponse
	ListStarshipActionsRequest
	StarshipAction
	InvalidKey
	ValidateSpeciesRequest
	ValidateSpeciesResponse
	DB
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type StarshipAction_Action int32

const (
	StarshipAction_TOOKOFF           StarshipAction_Action = 0
	StarshipAction_LANDED            StarshipAction_Action = 1
	StarshipAction_HYPERDRIVE        StarshipAction_Action = 2
	StarshipAction_HIDING_IN_A_MOUTH StarshipAction_Action = 3
)

var StarshipAction_Action_name = map[int32]string{
	0: "TOOKOFF",
	1: "LANDED",
	2: "HYPERDRIVE",
	3: "HIDING_IN_A_MOUTH",
}
var StarshipAction_Action_value = map[string]int32{
	"TOOKOFF":           0,
	"LANDED":            1,
	"HYPERDRIVE":        2,
	"HIDING_IN_A_MOUTH": 3,
}

func (x StarshipAction_Action) String() string {
	return proto1.EnumName(StarshipAction_Action_name, int32(x))
}
func (StarshipAction_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{31, 0} }

type Film struct {
	Title        string   `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	EpisodeId    int32    `protobuf:"varint,2,opt,name=episode_id,json=episodeId" json:"episode_id,omitempty"`
	OpeningCrawl string   `protobuf:"bytes,3,opt,name=opening_crawl,json=openingCrawl" json:"opening_crawl,omitempty"`
	Director     string   `protobuf:"bytes,4,opt,name=director" json:"director,omitempty"`
	Producer     string   `protobuf:"bytes,5,opt,name=producer" json:"producer,omitempty"`
	ReleaseDate  string   `protobuf:"bytes,6,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	CharacterIds []string `protobuf:"bytes,7,rep,name=character_ids,json=characterIds" json:"character_ids,omitempty"`
	PlanetIds    []string `protobuf:"bytes,8,rep,name=planet_ids,json=planetIds" json:"planet_ids,omitempty"`
	StarshipIds  []string `protobuf:"bytes,9,rep,name=starship_ids,json=starshipIds" json:"starship_ids,omitempty"`
	VehicleIds   []string `protobuf:"bytes,10,rep,name=vehicle_ids,json=vehicleIds" json:"vehicle_ids,omitempty"`
	SpeciesIds   []string `protobuf:"bytes,11,rep,name=species_ids,json=speciesIds" json:"species_ids,omitempty"`
	Id           string   `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"`
}

func (m *Film) Reset()                    { *m = Film{} }
func (m *Film) String() string            { return proto1.CompactTextString(m) }
func (*Film) ProtoMessage()               {}
func (*Film) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Film) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Film) GetEpisodeId() int32 {
	if m != nil {
		return m.EpisodeId
	}
	return 0
}

func (m *Film) GetOpeningCrawl() string {
	if m != nil {
		return m.OpeningCrawl
	}
	return ""
}

func (m *Film) GetDirector() string {
	if m != nil {
		return m.Director
	}
	return ""
}

func (m *Film) GetProducer() string {
	if m != nil {
		return m.Producer
	}
	return ""
}

func (m *Film) GetReleaseDate() string {
	if m != nil {
		return m.ReleaseDate
	}
	return ""
}

func (m *Film) GetCharacterIds() []string {
	if m != nil {
		return m.CharacterIds
	}
	return nil
}

func (m *Film) GetPlanetIds() []string {
	if m != nil {
		return m.PlanetIds
	}
	return nil
}

func (m *Film) GetStarshipIds() []string {
	if m != nil {
		return m.StarshipIds
	}
	return nil
}

func (m *Film) GetVehicleIds() []string {
	if m != nil {
		return m.VehicleIds
	}
	return nil
}

func (m *Film) GetSpeciesIds() []string {
	if m != nil {
		return m.SpeciesIds
	}
	return nil
}

func (m *Film) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetFilmRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetFilmRequest) Reset()                    { *m = GetFilmRequest{} }
func (m *GetFilmRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetFilmRequest) ProtoMessage()               {}
func (*GetFilmRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetFilmRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetFilmResponse struct {
	Film *Film `protobuf:"bytes,1,opt,name=film" json:"film,omitempty"`
}

func (m *GetFilmResponse) Reset()                    { *m = GetFilmResponse{} }
func (m *GetFilmResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetFilmResponse) ProtoMessage()               {}
func (*GetFilmResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetFilmResponse) GetFilm() *Film {
	if m != nil {
		return m.Film
	}
	return nil
}

type ListFilmsRequest struct {
}

func (m *ListFilmsRequest) Reset()                    { *m = ListFilmsRequest{} }
func (m *ListFilmsRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListFilmsRequest) ProtoMessage()               {}
func (*ListFilmsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListFilmsResponse struct {
	Films []*Film `protobuf:"bytes,1,rep,name=films" json:"films,omitempty"`
}

func (m *ListFilmsResponse) Reset()                    { *m = ListFilmsResponse{} }
func (m *ListFilmsResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListFilmsResponse) ProtoMessage()               {}
func (*ListFilmsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListFilmsResponse) GetFilms() []*Film {
	if m != nil {
		return m.Films
	}
	return nil
}

type Vehicle struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Model                string   `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Manufacturer         string   `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	CostInCredits        int32    `protobuf:"varint,4,opt,name=cost_in_credits,json=costInCredits" json:"cost_in_credits,omitempty"`
	Length               float32  `protobuf:"fixed32,5,opt,name=length" json:"length,omitempty"`
	MaxAtmospheringSpeed int32    `protobuf:"varint,6,opt,name=max_atmosphering_speed,json=maxAtmospheringSpeed" json:"max_atmosphering_speed,omitempty"`
	Crew                 int32    `protobuf:"varint,7,opt,name=crew" json:"crew,omitempty"`
	Passengers           int32    `protobuf:"varint,8,opt,name=passengers" json:"passengers,omitempty"`
	CargoCapacity        int32    `protobuf:"varint,9,opt,name=cargo_capacity,json=cargoCapacity" json:"cargo_capacity,omitempty"`
	Consumables          string   `protobuf:"bytes,10,opt,name=consumables" json:"consumables,omitempty"`
	VehicleClass         string   `protobuf:"bytes,11,opt,name=vehicle_class,json=vehicleClass" json:"vehicle_class,omitempty"`
	PilotIds             []string `protobuf:"bytes,12,rep,name=pilot_ids,json=pilotIds" json:"pilot_ids,omitempty"`
	FilmIds              []string `protobuf:"bytes,13,rep,name=film_ids,json=filmIds" json:"film_ids,omitempty"`
	Id                   string   `protobuf:"bytes,14,opt,name=id" json:"id,omitempty"`
}

func (m *Vehicle) Reset()                    { *m = Vehicle{} }
func (m *Vehicle) String() string            { return proto1.CompactTextString(m) }
func (*Vehicle) ProtoMessage()               {}
func (*Vehicle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Vehicle) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vehicle) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Vehicle) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Vehicle) GetCostInCredits() int32 {
	if m != nil {
		return m.CostInCredits
	}
	return 0
}

func (m *Vehicle) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Vehicle) GetMaxAtmospheringSpeed() int32 {
	if m != nil {
		return m.MaxAtmospheringSpeed
	}
	return 0
}

func (m *Vehicle) GetCrew() int32 {
	if m != nil {
		return m.Crew
	}
	return 0
}

func (m *Vehicle) GetPassengers() int32 {
	if m != nil {
		return m.Passengers
	}
	return 0
}

func (m *Vehicle) GetCargoCapacity() int32 {
	if m != nil {
		return m.CargoCapacity
	}
	return 0
}

func (m *Vehicle) GetConsumables() string {
	if m != nil {
		return m.Consumables
	}
	return ""
}

func (m *Vehicle) GetVehicleClass() string {
	if m != nil {
		return m.VehicleClass
	}
	return ""
}

func (m *Vehicle) GetPilotIds() []string {
	if m != nil {
		return m.PilotIds
	}
	return nil
}

func (m *Vehicle) GetFilmIds() []string {
	if m != nil {
		return m.FilmIds
	}
	return nil
}

func (m *Vehicle) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetVehicleRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetVehicleRequest) Reset()                    { *m = GetVehicleRequest{} }
func (m *GetVehicleRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetVehicleRequest) ProtoMessage()               {}
func (*GetVehicleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetVehicleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetVehicleResponse struct {
	Vehicle *Vehicle `protobuf:"bytes,1,opt,name=vehicle" json:"vehicle,omitempty"`
}

func (m *GetVehicleResponse) Reset()                    { *m = GetVehicleResponse{} }
func (m *GetVehicleResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetVehicleResponse) ProtoMessage()               {}
func (*GetVehicleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetVehicleResponse) GetVehicle() *Vehicle {
	if m != nil {
		return m.Vehicle
	}
	return nil
}

type ListVehiclesRequest struct {
}

func (m *ListVehiclesRequest) Reset()                    { *m = ListVehiclesRequest{} }
func (m *ListVehiclesRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListVehiclesRequest) ProtoMessage()               {}
func (*ListVehiclesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ListVehiclesResponse struct {
	Vehicles []*Vehicle `protobuf:"bytes,1,rep,name=vehicles" json:"vehicles,omitempty"`
}

func (m *ListVehiclesResponse) Reset()                    { *m = ListVehiclesResponse{} }
func (m *ListVehiclesResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListVehiclesResponse) ProtoMessage()               {}
func (*ListVehiclesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListVehiclesResponse) GetVehicles() []*Vehicle {
	if m != nil {
		return m.Vehicles
	}
	return nil
}

type Starship struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Model                string   `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Manufacturer         string   `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	CostInCredits        int64    `protobuf:"varint,4,opt,name=cost_in_credits,json=costInCredits" json:"cost_in_credits,omitempty"`
	Length               float32  `protobuf:"fixed32,5,opt,name=length" json:"length,omitempty"`
	Crew                 int32    `protobuf:"varint,6,opt,name=crew" json:"crew,omitempty"`
	Passengers           int32    `protobuf:"varint,7,opt,name=passengers" json:"passengers,omitempty"`
	CargoCapacity        int64    `protobuf:"varint,8,opt,name=cargo_capacity,json=cargoCapacity" json:"cargo_capacity,omitempty"`
	Consumables          string   `protobuf:"bytes,9,opt,name=consumables" json:"consumables,omitempty"`
	HyperdriveRating     float32  `protobuf:"fixed32,10,opt,name=hyperdrive_rating,json=hyperdriveRating" json:"hyperdrive_rating,omitempty"`
	Mglt                 int32    `protobuf:"varint,11,opt,name=mglt" json:"mglt,omitempty"`
	StarshipClass        string   `protobuf:"bytes,12,opt,name=starship_class,json=starshipClass" json:"starship_class,omitempty"`
	PilotIds             []string `protobuf:"bytes,13,rep,name=pilot_ids,json=pilotIds" json:"pilot_ids,omitempty"`
	FilmIds              []string `protobuf:"bytes,14,rep,name=film_ids,json=filmIds" json:"film_ids,omitempty"`
	Id                   string   `protobuf:"bytes,15,opt,name=id" json:"id,omitempty"`
	MaxAtmospheringSpeed int64    `protobuf:"varint,16,opt,name=max_atmosphering_speed,json=maxAtmospheringSpeed" json:"max_atmosphering_speed,omitempty"`
}

func (m *Starship) Reset()                    { *m = Starship{} }
func (m *Starship) String() string            { return proto1.CompactTextString(m) }
func (*Starship) ProtoMessage()               {}
func (*Starship) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Starship) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Starship) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Starship) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *Starship) GetCostInCredits() int64 {
	if m != nil {
		return m.CostInCredits
	}
	return 0
}

func (m *Starship) GetLength() float32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Starship) GetCrew() int32 {
	if m != nil {
		return m.Crew
	}
	return 0
}

func (m *Starship) GetPassengers() int32 {
	if m != nil {
		return m.Passengers
	}
	return 0
}

func (m *Starship) GetCargoCapacity() int64 {
	if m != nil {
		return m.CargoCapacity
	}
	return 0
}

func (m *Starship) GetConsumables() string {
	if m != nil {
		return m.Consumables
	}
	return ""
}

func (m *Starship) GetHyperdriveRating() float32 {
	if m != nil {
		return m.HyperdriveRating
	}
	return 0
}

func (m *Starship) GetMglt() int32 {
	if m != nil {
		return m.Mglt
	}
	return 0
}

func (m *Starship) GetStarshipClass() string {
	if m != nil {
		return m.StarshipClass
	}
	return ""
}

func (m *Starship) GetPilotIds() []string {
	if m != nil {
		return m.PilotIds
	}
	return nil
}

func (m *Starship) GetFilmIds() []string {
	if m != nil {
		return m.FilmIds
	}
	return nil
}

func (m *Starship) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Starship) GetMaxAtmospheringSpeed() int64 {
	if m != nil {
		return m.MaxAtmospheringSpeed
	}
	return 0
}

type GetStarshipRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetStarshipRequest) Reset()                    { *m = GetStarshipRequest{} }
func (m *GetStarshipRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetStarshipRequest) ProtoMessage()               {}
func (*GetStarshipRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetStarshipRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetStarshipResponse struct {
	Starship *Starship `protobuf:"bytes,1,opt,name=starship" json:"starship,omitempty"`
}

func (m *GetStarshipResponse) Reset()                    { *m = GetStarshipResponse{} }
func (m *GetStarshipResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetStarshipResponse) ProtoMessage()               {}
func (*GetStarshipResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetStarshipResponse) GetStarship() *Starship {
	if m != nil {
		return m.Starship
	}
	return nil
}

type ListStarshipsRequest struct {
}

func (m *ListStarshipsRequest) Reset()                    { *m = ListStarshipsRequest{} }
func (m *ListStarshipsRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListStarshipsRequest) ProtoMessage()               {}
func (*ListStarshipsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListStarshipsResponse struct {
	Starships []*Starship `protobuf:"bytes,1,rep,name=starships" json:"starships,omitempty"`
}

func (m *ListStarshipsResponse) Reset()                    { *m = ListStarshipsResponse{} }
func (m *ListStarshipsResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListStarshipsResponse) ProtoMessage()               {}
func (*ListStarshipsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListStarshipsResponse) GetStarships() []*Starship {
	if m != nil {
		return m.Starships
	}
	return nil
}

type Species struct {
	Name            string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Classification  string   `protobuf:"bytes,2,opt,name=classification" json:"classification,omitempty"`
	Designation     string   `protobuf:"bytes,3,opt,name=designation" json:"designation,omitempty"`
	AverageHeight   int32    `protobuf:"varint,4,opt,name=average_height,json=averageHeight" json:"average_height,omitempty"`
	SkinColors      string   `protobuf:"bytes,5,opt,name=skin_colors,json=skinColors" json:"skin_colors,omitempty"`
	EyeColors       string   `protobuf:"bytes,6,opt,name=eye_colors,json=eyeColors" json:"eye_colors,omitempty"`
	AverageLifespan int32    `protobuf:"varint,7,opt,name=average_lifespan,json=averageLifespan" json:"average_lifespan,omitempty"`
	Homeworld       string   `protobuf:"bytes,8,opt,name=homeworld" json:"homeworld,omitempty"`
	Language        string   `protobuf:"bytes,9,opt,name=language" json:"language,omitempty"`
	PeopleIds       []string `protobuf:"bytes,10,rep,name=people_ids,json=peopleIds" json:"people_ids,omitempty"`
	FilmIds         []string `protobuf:"bytes,11,rep,name=film_ids,json=filmIds" json:"film_ids,omitempty"`
	Id              string   `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"`
	HairColors      string   `protobuf:"bytes,13,opt,name=hair_colors,json=hairColors" json:"hair_colors,omitempty"`
}

func (m *Species) Reset()                    { *m = Species{} }
func (m *Species) String() string            { return proto1.CompactTextString(m) }
func (*Species) ProtoMessage()               {}
func (*Species) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Species) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Species) GetClassification() string {
	if m != nil {
		return m.Classification
	}
	return ""
}

func (m *Species) GetDesignation() string {
	if m != nil {
		return m.Designation
	}
	return ""
}

func (m *Species) GetAverageHeight() int32 {
	if m != nil {
		return m.AverageHeight
	}
	return 0
}

func (m *Species) GetSkinColors() string {
	if m != nil {
		return m.SkinColors
	}
	return ""
}

func (m *Species) GetEyeColors() string {
	if m != nil {
		return m.EyeColors
	}
	return ""
}

func (m *Species) GetAverageLifespan() int32 {
	if m != nil {
		return m.AverageLifespan
	}
	return 0
}

func (m *Species) GetHomeworld() string {
	if m != nil {
		return m.Homeworld
	}
	return ""
}

func (m *Species) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

func (m *Species) GetPeopleIds() []string {
	if m != nil {
		return m.PeopleIds
	}
	return nil
}

func (m *Species) GetFilmIds() []string {
	if m != nil {
		return m.FilmIds
	}
	return nil
}

func (m *Species) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Species) GetHairColors() string {
	if m != nil {
		return m.HairColors
	}
	return ""
}

type GetSpeciesRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetSpeciesRequest) Reset()                    { *m = GetSpeciesRequest{} }
func (m *GetSpeciesRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetSpeciesRequest) ProtoMessage()               {}
func (*GetSpeciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetSpeciesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetSpeciesResponse struct {
	Species *Species `protobuf:"bytes,1,opt,name=species" json:"species,omitempty"`
}

func (m *GetSpeciesResponse) Reset()                    { *m = GetSpeciesResponse{} }
func (m *GetSpeciesResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetSpeciesResponse) ProtoMessage()               {}
func (*GetSpeciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetSpeciesResponse) GetSpecies() *Species {
	if m != nil {
		return m.Species
	}
	return nil
}

type ListSpeciesRequest struct {
}

func (m *ListSpeciesRequest) Reset()                    { *m = ListSpeciesRequest{} }
func (m *ListSpeciesRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListSpeciesRequest) ProtoMessage()               {}
func (*ListSpeciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type ListSpeciesResponse struct {
	Species []*Species `protobuf:"bytes,1,rep,name=species" json:"species,omitempty"`
}

func (m *ListSpeciesResponse) Reset()                    { *m = ListSpeciesResponse{} }
func (m *ListSpeciesResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListSpeciesResponse) ProtoMessage()               {}
func (*ListSpeciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListSpeciesResponse) GetSpecies() []*Species {
	if m != nil {
		return m.Species
	}
	return nil
}

type Planet struct {
	Name           string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	RotationPeriod int32    `protobuf:"varint,2,opt,name=rotation_period,json=rotationPeriod" json:"rotation_period,omitempty"`
	OrbitalPeriod  int32    `protobuf:"varint,3,opt,name=orbital_period,json=orbitalPeriod" json:"orbital_period,omitempty"`
	Diameter       int32    `protobuf:"varint,4,opt,name=diameter" json:"diameter,omitempty"`
	Climate        string   `protobuf:"bytes,5,opt,name=climate" json:"climate,omitempty"`
	Gravity        float32  `protobuf:"fixed32,6,opt,name=gravity" json:"gravity,omitempty"`
	Terrain        string   `protobuf:"bytes,7,opt,name=terrain" json:"terrain,omitempty"`
	SurfaceWater   float32  `protobuf:"fixed32,8,opt,name=surface_water,json=surfaceWater" json:"surface_water,omitempty"`
	Population     int64    `protobuf:"varint,9,opt,name=population" json:"population,omitempty"`
	ResidentIds    []string `protobuf:"bytes,10,rep,name=resident_ids,json=residentIds" json:"resident_ids,omitempty"`
	FilmIds        []string `protobuf:"bytes,11,rep,name=film_ids,json=filmIds" json:"film_ids,omitempty"`
	Id             string   `protobuf:"bytes,12,opt,name=id" json:"id,omitempty"`
}

func (m *Planet) Reset()                    { *m = Planet{} }
func (m *Planet) String() string            { return proto1.CompactTextString(m) }
func (*Planet) ProtoMessage()               {}
func (*Planet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Planet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Planet) GetRotationPeriod() int32 {
	if m != nil {
		return m.RotationPeriod
	}
	return 0
}

func (m *Planet) GetOrbitalPeriod() int32 {
	if m != nil {
		return m.OrbitalPeriod
	}
	return 0
}

func (m *Planet) GetDiameter() int32 {
	if m != nil {
		return m.Diameter
	}
	return 0
}

func (m *Planet) GetClimate() string {
	if m != nil {
		return m.Climate
	}
	return ""
}

func (m *Planet) GetGravity() float32 {
	if m != nil {
		return m.Gravity
	}
	return 0
}

func (m *Planet) GetTerrain() string {
	if m != nil {
		return m.Terrain
	}
	return ""
}

func (m *Planet) GetSurfaceWater() float32 {
	if m != nil {
		return m.SurfaceWater
	}
	return 0
}

func (m *Planet) GetPopulation() int64 {
	if m != nil {
		return m.Population
	}
	return 0
}

func (m *Planet) GetResidentIds() []string {
	if m != nil {
		return m.ResidentIds
	}
	return nil
}

func (m *Planet) GetFilmIds() []string {
	if m != nil {
		return m.FilmIds
	}
	return nil
}

func (m *Planet) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPlanetRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPlanetRequest) Reset()                    { *m = GetPlanetRequest{} }
func (m *GetPlanetRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetPlanetRequest) ProtoMessage()               {}
func (*GetPlanetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetPlanetRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPlanetResponse struct {
	Planet *Planet `protobuf:"bytes,1,opt,name=planet" json:"planet,omitempty"`
}

func (m *GetPlanetResponse) Reset()                    { *m = GetPlanetResponse{} }
func (m *GetPlanetResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetPlanetResponse) ProtoMessage()               {}
func (*GetPlanetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetPlanetResponse) GetPlanet() *Planet {
	if m != nil {
		return m.Planet
	}
	return nil
}

type ListPlanetsRequest struct {
}

func (m *ListPlanetsRequest) Reset()                    { *m = ListPlanetsRequest{} }
func (m *ListPlanetsRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListPlanetsRequest) ProtoMessage()               {}
func (*ListPlanetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ListPlanetsResponse struct {
	Planets []*Planet `protobuf:"bytes,1,rep,name=planets" json:"planets,omitempty"`
}

func (m *ListPlanetsResponse) Reset()                    { *m = ListPlanetsResponse{} }
func (m *ListPlanetsResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListPlanetsResponse) ProtoMessage()               {}
func (*ListPlanetsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ListPlanetsResponse) GetPlanets() []*Planet {
	if m != nil {
		return m.Planets
	}
	return nil
}

type Person struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Height      int32    `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Mass        float32  `protobuf:"fixed32,3,opt,name=mass" json:"mass,omitempty"`
	HairColor   string   `protobuf:"bytes,4,opt,name=hair_color,json=hairColor" json:"hair_color,omitempty"`
	SkinColor   string   `protobuf:"bytes,5,opt,name=skin_color,json=skinColor" json:"skin_color,omitempty"`
	EyeColor    string   `protobuf:"bytes,6,opt,name=eye_color,json=eyeColor" json:"eye_color,omitempty"`
	BirthYear   string   `protobuf:"bytes,7,opt,name=birth_year,json=birthYear" json:"birth_year,omitempty"`
	Gender      string   `protobuf:"bytes,8,opt,name=gender" json:"gender,omitempty"`
	Homeworld   string   `protobuf:"bytes,9,opt,name=homeworld" json:"homeworld,omitempty"`
	FilmIds     []string `protobuf:"bytes,10,rep,name=film_ids,json=filmIds" json:"film_ids,omitempty"`
	SpeciesIds  []string `protobuf:"bytes,11,rep,name=species_ids,json=speciesIds" json:"species_ids,omitempty"`
	VehicleIds  []string `protobuf:"bytes,12,rep,name=vehicle_ids,json=vehicleIds" json:"vehicle_ids,omitempty"`
	StarshipIds []string `protobuf:"bytes,13,rep,name=starship_ids,json=starshipIds" json:"starship_ids,omitempty"`
	Id          string   `protobuf:"bytes,14,opt,name=id" json:"id,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto1.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Person) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Person) GetMass() float32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Person) GetHairColor() string {
	if m != nil {
		return m.HairColor
	}
	return ""
}

func (m *Person) GetSkinColor() string {
	if m != nil {
		return m.SkinColor
	}
	return ""
}

func (m *Person) GetEyeColor() string {
	if m != nil {
		return m.EyeColor
	}
	return ""
}

func (m *Person) GetBirthYear() string {
	if m != nil {
		return m.BirthYear
	}
	return ""
}

func (m *Person) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *Person) GetHomeworld() string {
	if m != nil {
		return m.Homeworld
	}
	return ""
}

func (m *Person) GetFilmIds() []string {
	if m != nil {
		return m.FilmIds
	}
	return nil
}

func (m *Person) GetSpeciesIds() []string {
	if m != nil {
		return m.SpeciesIds
	}
	return nil
}

func (m *Person) GetVehicleIds() []string {
	if m != nil {
		return m.VehicleIds
	}
	return nil
}

func (m *Person) GetStarshipIds() []string {
	if m != nil {
		return m.StarshipIds
	}
	return nil
}

func (m *Person) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPersonRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetPersonRequest) Reset()                    { *m = GetPersonRequest{} }
func (m *GetPersonRequest) String() string            { return proto1.CompactTextString(m) }
func (*GetPersonRequest) ProtoMessage()               {}
func (*GetPersonRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetPersonRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetPersonResponse struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
}

func (m *GetPersonResponse) Reset()                    { *m = GetPersonResponse{} }
func (m *GetPersonResponse) String() string            { return proto1.CompactTextString(m) }
func (*GetPersonResponse) ProtoMessage()               {}
func (*GetPersonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetPersonResponse) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type ListPeopleRequest struct {
}

func (m *ListPeopleRequest) Reset()                    { *m = ListPeopleRequest{} }
func (m *ListPeopleRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListPeopleRequest) ProtoMessage()               {}
func (*ListPeopleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type ListPeopleResponse struct {
	People []*Person `protobuf:"bytes,1,rep,name=people" json:"people,omitempty"`
}

func (m *ListPeopleResponse) Reset()                    { *m = ListPeopleResponse{} }
func (m *ListPeopleResponse) String() string            { return proto1.CompactTextString(m) }
func (*ListPeopleResponse) ProtoMessage()               {}
func (*ListPeopleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ListPeopleResponse) GetPeople() []*Person {
	if m != nil {
		return m.People
	}
	return nil
}

type ListStarshipActionsRequest struct {
}

func (m *ListStarshipActionsRequest) Reset()                    { *m = ListStarshipActionsRequest{} }
func (m *ListStarshipActionsRequest) String() string            { return proto1.CompactTextString(m) }
func (*ListStarshipActionsRequest) ProtoMessage()               {}
func (*ListStarshipActionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type StarshipAction struct {
	Starship *Starship             `protobuf:"bytes,1,opt,name=starship" json:"starship,omitempty"`
	Action   StarshipAction_Action `protobuf:"varint,2,opt,name=action,enum=sfapi.v1.StarshipAction_Action" json:"action,omitempty"`
}

func (m *StarshipAction) Reset()                    { *m = StarshipAction{} }
func (m *StarshipAction) String() string            { return proto1.CompactTextString(m) }
func (*StarshipAction) ProtoMessage()               {}
func (*StarshipAction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *StarshipAction) GetStarship() *Starship {
	if m != nil {
		return m.Starship
	}
	return nil
}

func (m *StarshipAction) GetAction() StarshipAction_Action {
	if m != nil {
		return m.Action
	}
	return StarshipAction_TOOKOFF
}

type InvalidKey struct {
	Key     string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *InvalidKey) Reset()                    { *m = InvalidKey{} }
func (m *InvalidKey) String() string            { return proto1.CompactTextString(m) }
func (*InvalidKey) ProtoMessage()               {}
func (*InvalidKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *InvalidKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *InvalidKey) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ValidateSpeciesRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *ValidateSpeciesRequest) Reset()                    { *m = ValidateSpeciesRequest{} }
func (m *ValidateSpeciesRequest) String() string            { return proto1.CompactTextString(m) }
func (*ValidateSpeciesRequest) ProtoMessage()               {}
func (*ValidateSpeciesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ValidateSpeciesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ValidateSpeciesResponse struct {
}

func (m *ValidateSpeciesResponse) Reset()                    { *m = ValidateSpeciesResponse{} }
func (m *ValidateSpeciesResponse) String() string            { return proto1.CompactTextString(m) }
func (*ValidateSpeciesResponse) ProtoMessage()               {}
func (*ValidateSpeciesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func init() {
	proto1.RegisterType((*Film)(nil), "sfapi.v1.Film")
	proto1.RegisterType((*GetFilmRequest)(nil), "sfapi.v1.GetFilmRequest")
	proto1.RegisterType((*GetFilmResponse)(nil), "sfapi.v1.GetFilmResponse")
	proto1.RegisterType((*ListFilmsRequest)(nil), "sfapi.v1.ListFilmsRequest")
	proto1.RegisterType((*ListFilmsResponse)(nil), "sfapi.v1.ListFilmsResponse")
	proto1.RegisterType((*Vehicle)(nil), "sfapi.v1.Vehicle")
	proto1.RegisterType((*GetVehicleRequest)(nil), "sfapi.v1.GetVehicleRequest")
	proto1.RegisterType((*GetVehicleResponse)(nil), "sfapi.v1.GetVehicleResponse")
	proto1.RegisterType((*ListVehiclesRequest)(nil), "sfapi.v1.ListVehiclesRequest")
	proto1.RegisterType((*ListVehiclesResponse)(nil), "sfapi.v1.ListVehiclesResponse")
	proto1.RegisterType((*Starship)(nil), "sfapi.v1.Starship")
	proto1.RegisterType((*GetStarshipRequest)(nil), "sfapi.v1.GetStarshipRequest")
	proto1.RegisterType((*GetStarshipResponse)(nil), "sfapi.v1.GetStarshipResponse")
	proto1.RegisterType((*ListStarshipsRequest)(nil), "sfapi.v1.ListStarshipsRequest")
	proto1.RegisterType((*ListStarshipsResponse)(nil), "sfapi.v1.ListStarshipsResponse")
	proto1.RegisterType((*Species)(nil), "sfapi.v1.Species")
	proto1.RegisterType((*GetSpeciesRequest)(nil), "sfapi.v1.GetSpeciesRequest")
	proto1.RegisterType((*GetSpeciesResponse)(nil), "sfapi.v1.GetSpeciesResponse")
	proto1.RegisterType((*ListSpeciesRequest)(nil), "sfapi.v1.ListSpeciesRequest")
	proto1.RegisterType((*ListSpeciesResponse)(nil), "sfapi.v1.ListSpeciesResponse")
	proto1.RegisterType((*Planet)(nil), "sfapi.v1.Planet")
	proto1.RegisterType((*GetPlanetRequest)(nil), "sfapi.v1.GetPlanetRequest")
	proto1.RegisterType((*GetPlanetResponse)(nil), "sfapi.v1.GetPlanetResponse")
	proto1.RegisterType((*ListPlanetsRequest)(nil), "sfapi.v1.ListPlanetsRequest")
	proto1.RegisterType((*ListPlanetsResponse)(nil), "sfapi.v1.ListPlanetsResponse")
	proto1.RegisterType((*Person)(nil), "sfapi.v1.Person")
	proto1.RegisterType((*GetPersonRequest)(nil), "sfapi.v1.GetPersonRequest")
	proto1.RegisterType((*GetPersonResponse)(nil), "sfapi.v1.GetPersonResponse")
	proto1.RegisterType((*ListPeopleRequest)(nil), "sfapi.v1.ListPeopleRequest")
	proto1.RegisterType((*ListPeopleResponse)(nil), "sfapi.v1.ListPeopleResponse")
	proto1.RegisterType((*ListStarshipActionsRequest)(nil), "sfapi.v1.ListStarshipActionsRequest")
	proto1.RegisterType((*StarshipAction)(nil), "sfapi.v1.StarshipAction")
	proto1.RegisterType((*InvalidKey)(nil), "sfapi.v1.InvalidKey")
	proto1.RegisterType((*ValidateSpeciesRequest)(nil), "sfapi.v1.ValidateSpeciesRequest")
	proto1.RegisterType((*ValidateSpeciesResponse)(nil), "sfapi.v1.ValidateSpeciesResponse")
	proto1.RegisterEnum("sfapi.v1.StarshipAction_Action", StarshipAction_Action_name, StarshipAction_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Starfriends service

type StarfriendsClient interface {
	// Get a single Film
	GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error)
	// Get a list of Films
	ListFilms(ctx context.Context, in *ListFilmsRequest, opts ...grpc.CallOption) (*ListFilmsResponse, error)
	// Get a single Vehicle
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error)
	// Get a list of Vehicles
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	// Get a single Starship
	GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipResponse, error)
	// Get a list of Starships
	ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsResponse, error)
	// Get a single Species
	GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesResponse, error)
	// Get a list of Species
	ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesResponse, error)
	// Get a single Planet
	GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*GetPlanetResponse, error)
	// Get a list of Planets
	ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsResponse, error)
	// Get a single Person
	GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error)
	// Get a list of People
	ListPeople(ctx context.Context, in *ListPeopleRequest, opts ...grpc.CallOption) (*ListPeopleResponse, error)
	// Watch starships doing stuff, in realtime
	ListStarshipActions(ctx context.Context, in *ListStarshipActionsRequest, opts ...grpc.CallOption) (Starfriends_ListStarshipActionsClient, error)
	// is the given species valid?
	ValidateSpecies(ctx context.Context, in *ValidateSpeciesRequest, opts ...grpc.CallOption) (*ValidateSpeciesResponse, error)
}

type starfriendsClient struct {
	cc *grpc.ClientConn
}

func NewStarfriendsClient(cc *grpc.ClientConn) StarfriendsClient {
	return &starfriendsClient{cc}
}

func (c *starfriendsClient) GetFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error) {
	out := new(GetFilmResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetFilm", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListFilms(ctx context.Context, in *ListFilmsRequest, opts ...grpc.CallOption) (*ListFilmsResponse, error) {
	out := new(ListFilmsResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListFilms", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*GetVehicleResponse, error) {
	out := new(GetVehicleResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetVehicle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	out := new(ListVehiclesResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListVehicles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) GetStarship(ctx context.Context, in *GetStarshipRequest, opts ...grpc.CallOption) (*GetStarshipResponse, error) {
	out := new(GetStarshipResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetStarship", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListStarships(ctx context.Context, in *ListStarshipsRequest, opts ...grpc.CallOption) (*ListStarshipsResponse, error) {
	out := new(ListStarshipsResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListStarships", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) GetSpecies(ctx context.Context, in *GetSpeciesRequest, opts ...grpc.CallOption) (*GetSpeciesResponse, error) {
	out := new(GetSpeciesResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetSpecies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListSpecies(ctx context.Context, in *ListSpeciesRequest, opts ...grpc.CallOption) (*ListSpeciesResponse, error) {
	out := new(ListSpeciesResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListSpecies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) GetPlanet(ctx context.Context, in *GetPlanetRequest, opts ...grpc.CallOption) (*GetPlanetResponse, error) {
	out := new(GetPlanetResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetPlanet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListPlanets(ctx context.Context, in *ListPlanetsRequest, opts ...grpc.CallOption) (*ListPlanetsResponse, error) {
	out := new(ListPlanetsResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListPlanets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) GetPerson(ctx context.Context, in *GetPersonRequest, opts ...grpc.CallOption) (*GetPersonResponse, error) {
	out := new(GetPersonResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/GetPerson", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListPeople(ctx context.Context, in *ListPeopleRequest, opts ...grpc.CallOption) (*ListPeopleResponse, error) {
	out := new(ListPeopleResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ListPeople", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starfriendsClient) ListStarshipActions(ctx context.Context, in *ListStarshipActionsRequest, opts ...grpc.CallOption) (Starfriends_ListStarshipActionsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Starfriends_serviceDesc.Streams[0], c.cc, "/sfapi.v1.Starfriends/ListStarshipActions", opts...)
	if err != nil {
		return nil, err
	}
	x := &starfriendsListStarshipActionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Starfriends_ListStarshipActionsClient interface {
	Recv() (*StarshipAction, error)
	grpc.ClientStream
}

type starfriendsListStarshipActionsClient struct {
	grpc.ClientStream
}

func (x *starfriendsListStarshipActionsClient) Recv() (*StarshipAction, error) {
	m := new(StarshipAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *starfriendsClient) ValidateSpecies(ctx context.Context, in *ValidateSpeciesRequest, opts ...grpc.CallOption) (*ValidateSpeciesResponse, error) {
	out := new(ValidateSpeciesResponse)
	err := grpc.Invoke(ctx, "/sfapi.v1.Starfriends/ValidateSpecies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Starfriends service

type StarfriendsServer interface {
	// Get a single Film
	GetFilm(context.Context, *GetFilmRequest) (*GetFilmResponse, error)
	// Get a list of Films
	ListFilms(context.Context, *ListFilmsRequest) (*ListFilmsResponse, error)
	// Get a single Vehicle
	GetVehicle(context.Context, *GetVehicleRequest) (*GetVehicleResponse, error)
	// Get a list of Vehicles
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	// Get a single Starship
	GetStarship(context.Context, *GetStarshipRequest) (*GetStarshipResponse, error)
	// Get a list of Starships
	ListStarships(context.Context, *ListStarshipsRequest) (*ListStarshipsResponse, error)
	// Get a single Species
	GetSpecies(context.Context, *GetSpeciesRequest) (*GetSpeciesResponse, error)
	// Get a list of Species
	ListSpecies(context.Context, *ListSpeciesRequest) (*ListSpeciesResponse, error)
	// Get a single Planet
	GetPlanet(context.Context, *GetPlanetRequest) (*GetPlanetResponse, error)
	// Get a list of Planets
	ListPlanets(context.Context, *ListPlanetsRequest) (*ListPlanetsResponse, error)
	// Get a single Person
	GetPerson(context.Context, *GetPersonRequest) (*GetPersonResponse, error)
	// Get a list of People
	ListPeople(context.Context, *ListPeopleRequest) (*ListPeopleResponse, error)
	// Watch starships doing stuff, in realtime
	ListStarshipActions(*ListStarshipActionsRequest, Starfriends_ListStarshipActionsServer) error
	// is the given species valid?
	ValidateSpecies(context.Context, *ValidateSpeciesRequest) (*ValidateSpeciesResponse, error)
}

func RegisterStarfriendsServer(s *grpc.Server, srv StarfriendsServer) {
	s.RegisterService(&_Starfriends_serviceDesc, srv)
}

func _Starfriends_GetFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetFilm(ctx, req.(*GetFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListFilms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListFilms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListFilms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListFilms(ctx, req.(*ListFilmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetVehicle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListVehicles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_GetStarship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStarshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetStarship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetStarship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetStarship(ctx, req.(*GetStarshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListStarships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStarshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListStarships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListStarships",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListStarships(ctx, req.(*ListStarshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_GetSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetSpecies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetSpecies(ctx, req.(*GetSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListSpecies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListSpecies(ctx, req.(*ListSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_GetPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetPlanet(ctx, req.(*GetPlanetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListPlanets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListPlanets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListPlanets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListPlanets(ctx, req.(*ListPlanetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_GetPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).GetPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/GetPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).GetPerson(ctx, req.(*GetPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListPeople_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeopleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ListPeople(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ListPeople",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ListPeople(ctx, req.(*ListPeopleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Starfriends_ListStarshipActions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStarshipActionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StarfriendsServer).ListStarshipActions(m, &starfriendsListStarshipActionsServer{stream})
}

type Starfriends_ListStarshipActionsServer interface {
	Send(*StarshipAction) error
	grpc.ServerStream
}

type starfriendsListStarshipActionsServer struct {
	grpc.ServerStream
}

func (x *starfriendsListStarshipActionsServer) Send(m *StarshipAction) error {
	return x.ServerStream.SendMsg(m)
}

func _Starfriends_ValidateSpecies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSpeciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarfriendsServer).ValidateSpecies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sfapi.v1.Starfriends/ValidateSpecies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarfriendsServer).ValidateSpecies(ctx, req.(*ValidateSpeciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Starfriends_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sfapi.v1.Starfriends",
	HandlerType: (*StarfriendsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFilm",
			Handler:    _Starfriends_GetFilm_Handler,
		},
		{
			MethodName: "ListFilms",
			Handler:    _Starfriends_ListFilms_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _Starfriends_GetVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _Starfriends_ListVehicles_Handler,
		},
		{
			MethodName: "GetStarship",
			Handler:    _Starfriends_GetStarship_Handler,
		},
		{
			MethodName: "ListStarships",
			Handler:    _Starfriends_ListStarships_Handler,
		},
		{
			MethodName: "GetSpecies",
			Handler:    _Starfriends_GetSpecies_Handler,
		},
		{
			MethodName: "ListSpecies",
			Handler:    _Starfriends_ListSpecies_Handler,
		},
		{
			MethodName: "GetPlanet",
			Handler:    _Starfriends_GetPlanet_Handler,
		},
		{
			MethodName: "ListPlanets",
			Handler:    _Starfriends_ListPlanets_Handler,
		},
		{
			MethodName: "GetPerson",
			Handler:    _Starfriends_GetPerson_Handler,
		},
		{
			MethodName: "ListPeople",
			Handler:    _Starfriends_ListPeople_Handler,
		},
		{
			MethodName: "ValidateSpecies",
			Handler:    _Starfriends_ValidateSpecies_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStarshipActions",
			Handler:       _Starfriends_ListStarshipActions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sfapi.proto",
}

func init() { proto1.RegisterFile("sfapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1895 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xcf, 0x73, 0x1b, 0x49,
	0x15, 0xc7, 0x63, 0x2b, 0x96, 0x34, 0x4f, 0xb2, 0x2c, 0xb7, 0x7f, 0x44, 0x96, 0xed, 0xc4, 0x99,
	0x0d, 0x4b, 0x60, 0xc1, 0xde, 0x0d, 0x50, 0xc0, 0x01, 0xaa, 0xbc, 0xb6, 0x13, 0xab, 0x36, 0x24,
	0x2e, 0x65, 0x09, 0x84, 0x82, 0x52, 0x75, 0x66, 0xda, 0x52, 0xd7, 0x8e, 0x66, 0x86, 0x9e, 0xb1,
	0xb3, 0x2e, 0x8a, 0x0b, 0x27, 0xee, 0x54, 0x71, 0xe4, 0xdf, 0xe0, 0x0f, 0xe0, 0x4f, 0xe0, 0x5f,
	0xe0, 0xc2, 0x9d, 0x1b, 0x17, 0xaa, 0x5f, 0xbf, 0x1e, 0xcd, 0x8c, 0x46, 0xce, 0xe6, 0xc2, 0xc9,
	0xea, 0xef, 0x7b, 0xd3, 0x6f, 0xde, 0xf4, 0xa7, 0xdf, 0xeb, 0x36, 0xb4, 0x92, 0x4b, 0x1e, 0xcb,
	0xc3, 0x58, 0x45, 0x69, 0xc4, 0x9a, 0x66, 0x70, 0xfd, 0x59, 0x7f, 0x6f, 0x1c, 0x45, 0xe3, 0x40,
	0x1c, 0xf1, 0x58, 0x1e, 0xf1, 0x30, 0x8c, 0x52, 0x9e, 0xca, 0x28, 0x4c, 0x8c, 0x9f, 0xfb, 0x9f,
	0x65, 0xb8, 0xfb, 0x54, 0x06, 0x53, 0xb6, 0x09, 0x2b, 0xa9, 0x4c, 0x03, 0xd1, 0x5b, 0x3a, 0x58,
	0x7a, 0xec, 0x0c, 0xcd, 0x80, 0xed, 0x03, 0x88, 0x58, 0x26, 0x91, 0x2f, 0x46, 0xd2, 0xef, 0x2d,
	0x1f, 0x2c, 0x3d, 0x5e, 0x19, 0x3a, 0xa4, 0x0c, 0x7c, 0xf6, 0x11, 0xac, 0x46, 0xb1, 0x08, 0x65,
	0x38, 0x1e, 0x79, 0x8a, 0xbf, 0x0b, 0x7a, 0x35, 0x7c, 0xb8, 0x4d, 0xe2, 0x89, 0xd6, 0x58, 0x1f,
	0x9a, 0xbe, 0x54, 0xc2, 0x4b, 0x23, 0xd5, 0xbb, 0x8b, 0xf6, 0x6c, 0xac, 0x6d, 0xb1, 0x8a, 0xfc,
	0x2b, 0x4f, 0xa8, 0xde, 0x8a, 0xb1, 0xd9, 0x31, 0x7b, 0x08, 0x6d, 0x25, 0x02, 0xc1, 0x13, 0x31,
	0xf2, 0x79, 0x2a, 0x7a, 0x75, 0xb4, 0xb7, 0x48, 0x3b, 0xe5, 0xa9, 0xd0, 0xf1, 0xbd, 0x09, 0x57,
	0xdc, 0x4b, 0x85, 0x1a, 0x49, 0x3f, 0xe9, 0x35, 0x0e, 0x6a, 0x3a, 0x7e, 0x26, 0x0e, 0xfc, 0x44,
	0xe7, 0x10, 0x07, 0x3c, 0x14, 0x29, 0x7a, 0x34, 0xd1, 0xc3, 0x31, 0x8a, 0x36, 0x3f, 0x84, 0x76,
	0x92, 0x72, 0x95, 0x4c, 0x64, 0x8c, 0x0e, 0x0e, 0x3a, 0xb4, 0xac, 0xa6, 0x5d, 0x1e, 0x40, 0xeb,
	0x5a, 0x4c, 0xa4, 0x17, 0x08, 0xf4, 0x00, 0xf4, 0x00, 0x92, 0xc8, 0x21, 0x89, 0x85, 0x27, 0x45,
	0x82, 0x0e, 0x2d, 0xe3, 0x40, 0x92, 0x76, 0xe8, 0xc0, 0xb2, 0xf4, 0x7b, 0x6d, 0xcc, 0x60, 0x59,
	0xfa, 0xee, 0x01, 0x74, 0x9e, 0x89, 0x54, 0x7f, 0xf8, 0xa1, 0xf8, 0xfd, 0x95, 0x48, 0x52, 0xf2,
	0x58, 0xca, 0x3c, 0x7e, 0x04, 0x6b, 0x99, 0x47, 0x12, 0x47, 0x61, 0x22, 0x98, 0x0b, 0x77, 0x2f,
	0x65, 0x30, 0x45, 0xa7, 0xd6, 0x93, 0xce, 0xa1, 0x5d, 0xe2, 0x43, 0xf4, 0x42, 0x9b, 0xcb, 0xa0,
	0xfb, 0x5c, 0x26, 0xf8, 0x5c, 0x42, 0x53, 0xbb, 0x3f, 0x85, 0xf5, 0x9c, 0x46, 0x93, 0x3d, 0x82,
	0x15, 0xfd, 0x40, 0xd2, 0x5b, 0x3a, 0xa8, 0x55, 0xcc, 0x66, 0x8c, 0xee, 0xdf, 0x6b, 0xd0, 0x78,
	0x6d, 0xf2, 0x64, 0x0c, 0xee, 0x86, 0x7c, 0x6a, 0x01, 0xc1, 0xdf, 0x9a, 0x9a, 0x69, 0xe4, 0x8b,
	0x00, 0xd1, 0x70, 0x86, 0x66, 0xc0, 0x5c, 0x68, 0x4f, 0x79, 0x78, 0x75, 0xc9, 0xbd, 0xf4, 0x4a,
	0x09, 0x65, 0xa9, 0xc8, 0x6b, 0xec, 0x63, 0x58, 0xf3, 0xa2, 0x24, 0x1d, 0xc9, 0x70, 0xe4, 0x29,
	0xe1, 0xcb, 0x34, 0x41, 0x38, 0x56, 0x86, 0xab, 0x5a, 0x1e, 0x84, 0x27, 0x46, 0x64, 0xdb, 0x50,
	0x0f, 0x44, 0x38, 0x4e, 0x27, 0xc8, 0xc7, 0xf2, 0x90, 0x46, 0xec, 0x87, 0xb0, 0x3d, 0xe5, 0x5f,
	0x8f, 0x78, 0x3a, 0x8d, 0x92, 0x78, 0x22, 0x94, 0x66, 0x30, 0x89, 0x85, 0xf0, 0x91, 0x93, 0x95,
	0xe1, 0xe6, 0x94, 0x7f, 0x7d, 0x9c, 0x33, 0xbe, 0xd2, 0x36, 0x9d, 0x83, 0xa7, 0xc4, 0xbb, 0x5e,
	0x03, 0x7d, 0xf0, 0x37, 0xbb, 0x0f, 0x10, 0xf3, 0x24, 0x11, 0xe1, 0x58, 0x28, 0xcd, 0x87, 0xb6,
	0xe4, 0x14, 0xf6, 0x2d, 0xe8, 0x78, 0x5c, 0x8d, 0xa3, 0x91, 0xc7, 0x63, 0xee, 0xc9, 0xf4, 0xa6,
	0xe7, 0xd0, 0x8b, 0x6a, 0xf5, 0x84, 0x44, 0x76, 0x00, 0x2d, 0x2f, 0x0a, 0x93, 0xab, 0x29, 0x7f,
	0x1b, 0x08, 0x0d, 0x09, 0xd2, 0x9a, 0x93, 0x34, 0xad, 0x16, 0x23, 0x2f, 0xe0, 0x89, 0xe6, 0x04,
	0xbf, 0x0b, 0x89, 0x27, 0x5a, 0x63, 0xbb, 0xe0, 0xc4, 0x32, 0x88, 0x0c, 0xac, 0x6d, 0x04, 0xa9,
	0x89, 0x82, 0xc6, 0x68, 0x07, 0x9a, 0x7a, 0x5d, 0xd0, 0xb6, 0x8a, 0xb6, 0x86, 0x1e, 0xcf, 0x08,
	0xeb, 0x64, 0xfc, 0x7c, 0x04, 0xeb, 0xcf, 0x44, 0x4a, 0x6b, 0xb7, 0x08, 0xb2, 0x63, 0x60, 0x79,
	0x27, 0x42, 0xe3, 0x13, 0x68, 0xd0, 0x2b, 0x11, 0x6a, 0xeb, 0x33, 0x38, 0xac, 0xaf, 0xf5, 0x70,
	0xb7, 0x60, 0x43, 0xc3, 0x45, 0x7a, 0xc6, 0xdc, 0x19, 0x6c, 0x16, 0x65, 0x9a, 0xfb, 0xfb, 0xd0,
	0xa4, 0x27, 0x2d, 0x79, 0x15, 0x93, 0x67, 0x2e, 0xee, 0x7f, 0x6b, 0xd0, 0x7c, 0x45, 0x3b, 0xf1,
	0xff, 0x03, 0x60, 0xed, 0x9b, 0x02, 0x68, 0x51, 0xaa, 0x2f, 0x44, 0xa9, 0xf1, 0x0d, 0x50, 0x6a,
	0x52, 0xc8, 0xdb, 0x50, 0x72, 0xe6, 0x51, 0xfa, 0x04, 0xd6, 0x27, 0x37, 0xb1, 0x50, 0xbe, 0x92,
	0xd7, 0x62, 0xa4, 0x78, 0x2a, 0xc3, 0x31, 0x22, 0xb7, 0x3c, 0xec, 0xce, 0x0c, 0x43, 0xd4, 0xf5,
	0x9b, 0x4e, 0xc7, 0x41, 0x8a, 0xb8, 0xad, 0x0c, 0xf1, 0xb7, 0x7e, 0x93, 0xac, 0xea, 0x19, 0x18,
	0x4d, 0x71, 0x5a, 0xb5, 0x6a, 0x05, 0x8d, 0xab, 0xb7, 0xd0, 0xd8, 0xa9, 0xa2, 0x71, 0xcd, 0x82,
	0x76, 0xcb, 0x6e, 0xed, 0xe2, 0x07, 0xa8, 0xdc, 0xad, 0xee, 0x23, 0xc4, 0xd3, 0xae, 0xff, 0x22,
	0x88, 0xcf, 0x60, 0xa3, 0xe0, 0x45, 0xa4, 0x1d, 0x42, 0xd3, 0xe6, 0x42, 0x18, 0xb3, 0x19, 0x69,
	0x99, 0x77, 0xe6, 0xe3, 0x6e, 0x1b, 0x62, 0xad, 0x25, 0x23, 0x79, 0x00, 0x5b, 0x25, 0x9d, 0x02,
	0x7c, 0x0a, 0x8e, 0x7d, 0xd8, 0xb2, 0x5c, 0x15, 0x61, 0xe6, 0xe4, 0xfe, 0xad, 0x06, 0x8d, 0x57,
	0xa6, 0x29, 0x54, 0xc2, 0xfc, 0x31, 0x74, 0x70, 0x2d, 0xe4, 0xa5, 0xf4, 0xb0, 0x4b, 0x13, 0xd5,
	0x25, 0x55, 0xf3, 0xe1, 0x8b, 0x44, 0x8e, 0x43, 0xe3, 0x64, 0xe8, 0xce, 0x4b, 0x7a, 0x79, 0xf9,
	0xb5, 0x50, 0x7c, 0x2c, 0x46, 0x13, 0x21, 0xc7, 0x93, 0xd4, 0x16, 0x57, 0x52, 0xcf, 0x51, 0xc4,
	0xbe, 0xf5, 0x95, 0xde, 0x00, 0x51, 0x10, 0xa9, 0x84, 0x3a, 0x30, 0x68, 0xe9, 0x04, 0x15, 0xec,
	0xff, 0x37, 0xc2, 0xda, 0x4d, 0x07, 0x76, 0xc4, 0x8d, 0x20, 0xf3, 0x77, 0xa0, 0x6b, 0xc3, 0x04,
	0xf2, 0x52, 0x24, 0x31, 0x0f, 0x89, 0xfa, 0x35, 0xd2, 0x9f, 0x93, 0xcc, 0xf6, 0xc0, 0x99, 0x44,
	0x53, 0xf1, 0x2e, 0x52, 0x81, 0x8f, 0xd4, 0x3b, 0xc3, 0x99, 0xa0, 0xcf, 0x01, 0x01, 0x0f, 0xc7,
	0x57, 0x7c, 0x2c, 0x08, 0xf7, 0x6c, 0x8c, 0xfd, 0x5b, 0x44, 0x71, 0xa1, 0xf9, 0x3a, 0x46, 0x29,
	0x53, 0xd8, 0xaa, 0xa2, 0x30, 0xeb, 0xba, 0x3a, 0xdd, 0x09, 0x97, 0xca, 0xa6, 0xb3, 0x6a, 0xd2,
	0xd5, 0x92, 0xc9, 0x87, 0x8a, 0x26, 0x2d, 0xd1, 0xed, 0x45, 0x33, 0x73, 0x9a, 0x15, 0x4d, 0xea,
	0xf7, 0xf3, 0x45, 0xd3, 0xfa, 0x5a, 0x0f, 0x77, 0x13, 0x18, 0x32, 0x55, 0x08, 0xe4, 0x7e, 0x6e,
	0x4a, 0xe9, 0xad, 0x33, 0xd7, 0xde, 0x33, 0xf3, 0xbf, 0x97, 0xa1, 0x7e, 0x81, 0x67, 0x9b, 0x4a,
	0xc2, 0xbe, 0x0d, 0x6b, 0x8a, 0x4e, 0x80, 0xa3, 0x58, 0x28, 0x19, 0xd9, 0x43, 0x5d, 0xc7, 0xca,
	0x17, 0xa8, 0x6a, 0x80, 0x22, 0xf5, 0x56, 0xa6, 0x3c, 0xb0, 0x7e, 0x35, 0x03, 0x10, 0xa9, 0xe4,
	0x86, 0x67, 0x3b, 0x3e, 0x15, 0xa9, 0x50, 0x44, 0x58, 0x36, 0x66, 0x3d, 0x68, 0x78, 0x81, 0x9c,
	0xea, 0xa3, 0x9b, 0x01, 0xcb, 0x0e, 0xb5, 0x65, 0xac, 0xf8, 0xb5, 0xae, 0x7f, 0x75, 0xac, 0x59,
	0x76, 0xa8, 0x2d, 0xa9, 0x50, 0x8a, 0x4b, 0xc3, 0x91, 0x33, 0xb4, 0x43, 0xdd, 0x3c, 0x93, 0x2b,
	0x75, 0xc9, 0x3d, 0x31, 0x7a, 0xc7, 0x75, 0xb8, 0x26, 0x3e, 0xd9, 0x26, 0xf1, 0x57, 0x5a, 0xc3,
	0xfa, 0x1b, 0xc5, 0x57, 0x81, 0xd9, 0x17, 0x0e, 0x96, 0x96, 0x9c, 0x62, 0x8e, 0x94, 0x89, 0xf4,
	0x45, 0x98, 0xe6, 0x60, 0x6a, 0x59, 0xed, 0xc3, 0x70, 0x72, 0x5d, 0xe8, 0x3e, 0x13, 0xa9, 0xf9,
	0xda, 0x8b, 0x60, 0xf9, 0x19, 0x12, 0x65, 0x7d, 0x68, 0x45, 0x1f, 0x43, 0xdd, 0x9c, 0x3f, 0x09,
	0x95, 0xee, 0x6c, 0x41, 0xc9, 0x93, 0xec, 0x16, 0x14, 0xa3, 0x66, 0xa0, 0x1c, 0x1b, 0x50, 0x32,
	0x95, 0xa6, 0xfd, 0x2e, 0x34, 0xcc, 0x63, 0x16, 0x94, 0xf9, 0x79, 0xad, 0x83, 0xfb, 0xe7, 0x1a,
	0xd4, 0x2f, 0x84, 0x4a, 0xa2, 0xb0, 0x92, 0x93, 0x6d, 0xa8, 0x53, 0xdd, 0x30, 0x78, 0xd0, 0x08,
	0x5b, 0x89, 0x6e, 0x16, 0x35, 0xfc, 0xf8, 0xf8, 0x5b, 0xef, 0xcf, 0xd9, 0xae, 0xa2, 0x13, 0xbe,
	0x93, 0x6d, 0x2a, 0x6d, 0x9e, 0xd5, 0x18, 0x22, 0xc1, 0xc9, 0x4a, 0x8c, 0xee, 0x30, 0x59, 0x85,
	0xa1, 0x02, 0xd3, 0xb4, 0x05, 0x46, 0x3f, 0xfb, 0x56, 0xaa, 0x74, 0x32, 0xba, 0x11, 0x5c, 0x11,
	0x11, 0x0e, 0x2a, 0x6f, 0x04, 0x57, 0xfa, 0x2d, 0xc7, 0x22, 0xf4, 0x09, 0x06, 0x67, 0x48, 0xa3,
	0x62, 0xad, 0x71, 0xca, 0xb5, 0x26, 0xbf, 0xc2, 0x50, 0x5c, 0xe1, 0xf7, 0x9e, 0xe3, 0x4b, 0x37,
	0x81, 0xf6, 0xdc, 0x4d, 0xa0, 0x7c, 0x9b, 0x58, 0x9d, 0xbf, 0x4d, 0x94, 0x4f, 0x6a, 0x84, 0x11,
	0x2e, 0xc6, 0x7b, 0x30, 0x22, 0x9f, 0x1c, 0x46, 0xa8, 0x54, 0x60, 0x64, 0x3c, 0xc9, 0xee, 0x6e,
	0x98, 0x1b, 0xc0, 0x05, 0x16, 0x4d, 0x4b, 0xd1, 0xcf, 0x89, 0x2d, 0x12, 0xf3, 0x93, 0x6a, 0xa5,
	0x82, 0xa1, 0x6c, 0x52, 0x6d, 0x77, 0xf7, 0xa0, 0x9f, 0x6f, 0x8c, 0xc7, 0x1e, 0xde, 0x2b, 0xed,
	0xec, 0xff, 0x58, 0x82, 0x4e, 0xd1, 0xf4, 0xa1, 0x1d, 0x99, 0xfd, 0x18, 0xea, 0xdc, 0xcb, 0xda,
	0x60, 0xe7, 0xc9, 0x83, 0x79, 0x6f, 0x33, 0xf3, 0xa1, 0xf9, 0x33, 0x24, 0x77, 0xf7, 0x1c, 0xea,
	0x14, 0xb2, 0x05, 0x8d, 0x2f, 0x5f, 0xbe, 0xfc, 0xe2, 0xe5, 0xd3, 0xa7, 0xdd, 0x3b, 0x0c, 0xa0,
	0xfe, 0xfc, 0xf8, 0xc5, 0xe9, 0xd9, 0x69, 0x77, 0x89, 0x75, 0x00, 0xce, 0xdf, 0x5c, 0x9c, 0x0d,
	0x4f, 0x87, 0x83, 0xd7, 0x67, 0xdd, 0x65, 0xb6, 0x05, 0xeb, 0xe7, 0x83, 0xd3, 0xc1, 0x8b, 0x67,
	0xa3, 0xc1, 0x8b, 0xd1, 0xf1, 0xe8, 0x17, 0x2f, 0x7f, 0xf9, 0xe5, 0x79, 0xb7, 0xe6, 0xfe, 0x04,
	0x60, 0x10, 0x5e, 0xf3, 0x40, 0xfa, 0x5f, 0x88, 0x1b, 0xd6, 0x85, 0xda, 0x57, 0xe2, 0x86, 0x96,
	0x45, 0xff, 0xd4, 0xf5, 0x6a, 0x2a, 0x92, 0x44, 0xb7, 0x2d, 0xd3, 0xaa, 0xed, 0xd0, 0xfd, 0x1e,
	0x6c, 0xbf, 0xd6, 0xcf, 0xf1, 0x54, 0x94, 0xfa, 0x49, 0xc5, 0x7e, 0x73, 0x77, 0xe0, 0xde, 0x9c,
	0xb7, 0x59, 0x90, 0x27, 0x7f, 0x6d, 0x41, 0x4b, 0xa7, 0x7b, 0xa9, 0xa4, 0x08, 0xfd, 0x84, 0xfd,
	0x16, 0x1a, 0x74, 0x31, 0x64, 0xbd, 0xd9, 0x07, 0x29, 0xde, 0x26, 0xfb, 0x3b, 0x15, 0x16, 0x33,
	0x9f, 0xbb, 0xf7, 0xa7, 0x7f, 0xfe, 0xeb, 0x2f, 0xcb, 0xdb, 0x6c, 0xf3, 0x08, 0x5d, 0x8e, 0xae,
	0x3f, 0x3b, 0xc2, 0xbb, 0xde, 0xd1, 0x1f, 0xa4, 0xff, 0x47, 0xf6, 0x3b, 0x70, 0xb2, 0xbb, 0x22,
	0xeb, 0xcf, 0x66, 0x29, 0x5f, 0x2a, 0xfb, 0xbb, 0x95, 0x36, 0x8a, 0x71, 0x0f, 0x63, 0xac, 0xb3,
	0xb5, 0x52, 0x0c, 0x36, 0x01, 0x98, 0x5d, 0x38, 0xd8, 0x6e, 0xe1, 0x2d, 0x8b, 0x77, 0x95, 0xfe,
	0x5e, 0xb5, 0x91, 0x22, 0x3c, 0xc0, 0x08, 0x3b, 0xec, 0xde, 0x2c, 0x82, 0xbd, 0x34, 0x98, 0x44,
	0x24, 0xb4, 0xf3, 0x17, 0x10, 0xb6, 0x5f, 0x7c, 0xdf, 0xd2, 0x7d, 0xa5, 0x7f, 0x7f, 0x91, 0x99,
	0xe2, 0xf5, 0x31, 0xde, 0x26, 0x63, 0xf3, 0xf1, 0x58, 0x00, 0xad, 0xdc, 0x01, 0x94, 0x15, 0x5f,
	0xbc, 0x74, 0x7a, 0xed, 0xef, 0x2f, 0xb0, 0x52, 0x9c, 0x03, 0x8c, 0xd3, 0x67, 0xbd, 0x59, 0x9c,
	0xec, 0xfc, 0x68, 0x12, 0x9b, 0xc2, 0x6a, 0xe1, 0x3c, 0xca, 0x4a, 0xaf, 0x5e, 0x3e, 0xc0, 0xf6,
	0x1f, 0x2c, 0xb4, 0x53, 0xcc, 0x5d, 0x8c, 0xb9, 0xc5, 0x36, 0x2a, 0x62, 0xb2, 0x31, 0xae, 0x98,
	0x3d, 0xb5, 0x16, 0x57, 0xac, 0x08, 0x76, 0x69, 0xc5, 0x4a, 0x1c, 0xbb, 0xf7, 0x31, 0x4a, 0x8f,
	0x6d, 0xe7, 0xa2, 0x18, 0x17, 0x93, 0x97, 0x80, 0x56, 0xee, 0xf4, 0x93, 0xff, 0x8a, 0xf3, 0x47,
	0xa5, 0xfe, 0xfe, 0x02, 0x2b, 0xc5, 0xda, 0xc1, 0x58, 0x1b, 0x6c, 0x7d, 0x2e, 0x16, 0xf3, 0xc1,
	0xc9, 0x1a, 0x72, 0x1e, 0xf0, 0x72, 0x27, 0xef, 0xef, 0x56, 0xda, 0x16, 0x27, 0x43, 0x9d, 0xb5,
	0x90, 0x0c, 0x75, 0xe8, 0x72, 0x32, 0xc5, 0x76, 0x5e, 0x4e, 0xa6, 0xd4, 0xd6, 0xab, 0x92, 0xa1,
	0x58, 0xcc, 0x33, 0xc9, 0x98, 0x3e, 0x5e, 0x4a, 0x26, 0xdf, 0x4f, 0xca, 0xc9, 0x14, 0xfa, 0x88,
	0xbb, 0x8f, 0x01, 0xee, 0xb1, 0xad, 0x5c, 0x00, 0x2c, 0xf1, 0x26, 0x17, 0x0e, 0x30, 0xeb, 0x13,
	0xac, 0xb4, 0xef, 0x0b, 0x2d, 0xa5, 0xbf, 0x57, 0x6d, 0xa4, 0x38, 0x3d, 0x8c, 0xc3, 0x58, 0xb7,
	0x1c, 0x87, 0xbd, 0xa1, 0x93, 0x6f, 0xb1, 0x95, 0xb0, 0x47, 0xd5, 0xe4, 0x16, 0x3b, 0x4d, 0xbf,
	0xb7, 0xa8, 0x2d, 0xb8, 0x77, 0x3e, 0x5d, 0x62, 0xbf, 0x86, 0xb5, 0x52, 0x65, 0x65, 0x07, 0xb9,
	0xff, 0x38, 0x54, 0x96, 0xe8, 0xfe, 0xc3, 0x5b, 0x3c, 0x28, 0x99, 0x3b, 0x9f, 0x37, 0x7e, 0xb3,
	0x82, 0xff, 0x43, 0x7d, 0x5b, 0xc7, 0x3f, 0x3f, 0xf8, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d,
	0x96, 0xad, 0x54, 0x81, 0x15, 0x00, 0x00,
}
