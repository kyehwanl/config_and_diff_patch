diff --git a/bgpsec_openssl/bgpsec_openssl.c b/bgpsec_openssl/bgpsec_openssl.c
index c4a8285..4f111a7 100644
--- a/bgpsec_openssl/bgpsec_openssl.c
+++ b/bgpsec_openssl/bgpsec_openssl.c
@@ -12,6 +12,14 @@
 /* general API header which will be public to the customer side */
 #include "bgpsec_openssl/bgpsec_openssl.h"
 
+//#define _TIME_MEASURE_ENABLED_
+#ifdef _TIME_MEASURE_ENABLED_
+#include "/users/kyehwanl/Programming/time-measure/tm-library/util_time_measure.h"
+FILE *fp;
+unsigned long realtime, cputime;
+RUSAGE_T before, after;
+#endif /* _TIME_MEASURE_ENABLED_ */
+
 Record_t *g_records = NULL;
 Record_t *g_records_pub = NULL;
 struct Enbuf_Eckey_t
@@ -66,7 +74,8 @@ static bool cmpSKI(u_int8_t* arr1, u_int8_t* arr2)
  * @param signature: input resource for verification
  * @param signature_len: signature length
  *
- * @return status sucess(API_BGPSEC_VERIFY_SUCCESS==1), failure(API_BGPSEC_VERIFY_FAILURE==0)
+ * @return status sucess(API_BGPSEC_VERIFY_SUCCESS==1),
+ *                failure(API_BGPSEC_VERIFY_FAILURE==0)
  *                  error(API_BGPSEC_VERIFY_ERROR == -1)
  */
 
@@ -74,19 +83,25 @@ int cl_BgpsecDoVerifySignature (u_int8_t *digest, int digest_len,
                                       EC_KEY    *eckey_nistp256,
                                       u_int8_t *signature, int signature_len)
 {
-    if (IS_DEBUG_ENABLED)
-    {
-      sca_debugLog(LOG_DEBUG, "Received signatgure: 0x:");
-      printHex(signature_len, (unsigned char*)signature);
-    }
 
     int status = 0;
-    if( (status = ECDSA_verify(0, digest, digest_len, signature, signature_len, eckey_nistp256)) != 1)
+#ifdef _TIME_MEASURE_ENABLED_
+  GETRUSAGE (&before);
+#endif /* _TIME_MEASURE_ENABLED_ */
+    status = ECDSA_verify(0, digest, digest_len, signature, signature_len, eckey_nistp256);
+
+#ifdef _TIME_MEASURE_ENABLED_
+  GETRUSAGE (&after);
+  realtime = thread_consumed_time (&after, &before, &cputime);
+  fprintf(fp, "%5lu\n",realtime); fflush(fp);
+  sca_debugLog(LOG_INFO, "%s TASK\t\t: %10lu us (cpu time %10lu us)\n", __FUNCTION__, realtime, cputime);
+#endif /* _TIME_MEASURE_ENABLED_ */
+
+    if( status != 1)
     {
     /* error return handling */
       //SSL_load_error_strings();
-      sca_debugLog(LOG_ERR, "+ [libcrypto] ECDSA_verify failure: %s\n", \
-          ERR_error_string(ERR_get_error(), NULL));
+      ;
       ERR_print_errors_fp(stderr);
     }
     return status;
@@ -94,60 +109,6 @@ int cl_BgpsecDoVerifySignature (u_int8_t *digest, int digest_len,
 
 
 
-#ifdef _DEPRECATED_
-/**
- * checks flie prefix with ski and set the public key with the key and
- * performs digest operation with messages, it returnes md as a message digest
- *
- * @param sslVerifyData: BGPSecSignData strucutre
- *
- * @return status sucess(API_BGPSEC_VERIFY_SUCCESS), failure(API_BGPSEC_VERIFY_FAILURE)
- */
-int stcl_BgpsecVerifySignatureSSL (BGPSecSignData* sslVerifyData)
-{
-    EC_KEY  *ecdsa_key=NULL;
-    int status;
-
-    char szFileName[MAXPATHLEN];
-    if (!sca_FindDirInSKI(szFileName, sizeof(szFileName), sslVerifyData->ski))
-    {
-      sca_debugLog(LOG_ERR, "+ [libcrypto] failed to find a key filename from a ski\n");
-      status = -1;
-      goto err_cleanup;
-    }
-
-    if (API_BGPSEC_SUCCESS !=
-        cl_BgpsecSetEcPublicKey(szFileName, &ecdsa_key, API_BGPSEC_DEFAULT_CURVE))
-    {
-      sca_debugLog(LOG_ERR, "+ [libcrypto] Failed to set a bgpsec ecdsa key \n");
-      status = -1;
-      goto err_cleanup;
-    }
-
-
-    unsigned char md[SHA256_DIGEST_LENGTH];
-    cl_BgpsecOctetDigest(sslVerifyData->data, sslVerifyData->dataLength, md);
-    status = cl_BgpsecDoVerifySignature (md, SHA256_DIGEST_LENGTH,
-                                       ecdsa_key,
-                                       sslVerifyData->signature,
-                                       sslVerifyData->sigLen);
-
-    if(status != API_BGPSEC_VERIFY_SUCCESS)
-    {
-      sca_debugLog(LOG_ERR, "+ [libcrypto] Error at verifying\n");
-      status = API_BGPSEC_VERIFY_FAILURE;
-    }
-
-err_cleanup:
-    // openssl cleanup
-    if (ecdsa_key) EC_KEY_free(ecdsa_key);
-    //
-    // CRYPTO_cleanup_all_ex_data();
-    // ERR_free_strings();
-    // ERR_remove_state(0);
-    return status;
-}
-#endif /* _DEPRECATED_ */
 
 /**
  * same with stcl_BgpsecVerifySignatureSSL function except this one uses key information
@@ -2435,5 +2095,9 @@ __attribute__((always_inline)) inline void printHex(int len, unsigned char* buff
 int init(const char* value)
 {
   // Just to be compliant with the specification
+#ifdef _TIME_MEASURE_ENABLED_
+  fp = fopen ("/tmp/validate_stat.txt", "a");
+#endif /* _TIME_MEASURE_ENABLED_ */
+
   return 1;
 }
diff --git a/crypto_imple.c b/crypto_imple.c
index 3c3eef6..6539fa9 100644
--- a/crypto_imple.c
+++ b/crypto_imple.c
diff --git a/srxcryptoapi.c b/srxcryptoapi.c
diff --git a/srxcryptoapi.conf b/srxcryptoapi.conf
index 128d9a6..0ecd33d 100644
--- a/srxcryptoapi.conf
+++ b/srxcryptoapi.conf
@@ -19,6 +19,14 @@ bgpsec_openssl: {
 # in case the default specified method names are not implemented, the 
 # SRxCryptoAPI wrapper functions are mapped.
 #
+
+# Library initialization method parameters - init is only performed if use_init
+# is set to 1. To disable initialization (including mapping) set value to 0
+  use_init                    = "1";
+# A String or "NULL" as initialization parameter.
+  init_value                  = "NULL";
+
+# Minimum required functions to operate
   method_validate      = "validate";
   method_sign_with_key = "sign_with_key";
   method_sign_with_id  = "sign_with_id";
diff --git a/srxcryptoapi.conf.sample b/srxcryptoapi.conf.sample
index 328043f..deb073f 100644
--- a/srxcryptoapi.conf.sample
+++ b/srxcryptoapi.conf.sample
@@ -29,6 +29,12 @@ bgpsec_openssl: {
 # SRxCryptoAPI wrapper functions are mapped.
 #
 
+# Library initialization method parameters - init is only performed if use_init
+# is set to 1. To disable initialization (including mapping) set value to 0
+  use_init                    = "1";
+# A String or "NULL" as initialization parameter.
+  init_value                  = "NULL";
+  
 # Minimum required functions to operate
   method_validate             = "validate";
   method_sign_with_key        = "sign_with_key";
