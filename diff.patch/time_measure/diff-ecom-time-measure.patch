diff --git a/quaggasrx/bgpd/bgp_attr.c b/quaggasrx/bgpd/bgp_attr.c
index 2ffb760..bd9662e 100644
--- a/quaggasrx/bgpd/bgp_attr.c
+++ b/quaggasrx/bgpd/bgp_attr.c
@@ -1692,6 +1692,44 @@ bgp_mp_unreach_parse (struct bgp_attr_parser_args *args,
   return BGP_ATTR_PARSE_PROCEED;
 }
 
+#ifdef USE_SRX
+#define TIME_MEASURE_TEST_ENABLED
+#ifdef TIME_MEASURE_TEST_ENABLED
+struct ecommunity_val srx_gettime(as_t local_as)
+{
+
+  /* time measure here and put the data into 8 byte long ecommunity payload
+   * (cf.) tv_sec, tv_usec: __SLONGWORD_TYPE ( == long int type )
+   */
+  unsigned long int val;
+  unsigned short sec;
+  struct timeval community_now;         /* current time */
+  struct ecommunity_val eval;
+  //
+  quagga_gettime(1 /*QUAGGA_CLK_MONOTONIC*/, &community_now);
+  printf("+++ [%s] TIME -- sec: %lu(0x%08x) msec: %lu(0x%08x)\n",
+      __FUNCTION__,
+      community_now.tv_sec, community_now.tv_sec,
+      community_now.tv_usec/1000, community_now.tv_usec/1000);
+
+  sec = (community_now.tv_sec) & 0xFFFF; // sec : 2 byte-long
+  val = community_now.tv_usec / 1000; // mili-sec: 4 byte-long
+
+  printf("sec = 0x%02x val = 0x%08X\n", sec, val);
+  printf("local as: %02x\n", local_as);
+
+
+  /* fill the ecommunity value here */
+  memset(&eval, 0x00, sizeof(struct ecommunity_val));
+  memcpy(&eval, &local_as, 2);
+  memcpy(&eval.val[2], &sec, 2);
+  memcpy(&eval.val[4], &val, 4);
+
+  return eval;
+}
+#endif
+#endif
+
 /* Extended Community attribute. */
 static bgp_attr_parse_ret_t
 bgp_attr_ext_communities (struct bgp_attr_parser_args *args)
@@ -1710,6 +1748,39 @@ bgp_attr_ext_communities (struct bgp_attr_parser_args *args)
 
   (bgp_attr_extra_get (attr))->ecommunity =
     ecommunity_parse ((u_int8_t *)stream_pnt (peer->ibuf), length);
+
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+  /* Prepare one structure for adding a new value into the a new
+   * Extended Communities  */
+  struct ecommunity_val eval;
+  struct ecommunity *old_ecom, *new_ecom;
+
+  old_ecom = (bgp_attr_extra_get (attr))->ecommunity;
+
+  if (old_ecom)
+  {
+    new_ecom = ecommunity_dup (old_ecom);
+  }
+
+  // fill eval with time measured
+  eval = srx_gettime(peer->local_as);
+
+  if ( call_ecommunity_add_val (new_ecom, &eval))
+  {
+    ecommunity_unintern (&old_ecom);
+    attr->extra->ecommunity = ecommunity_intern (new_ecom);
+  }
+  else
+  {
+    if(new_ecom)
+      ecommunity_free (&new_ecom);
+  }
+
+#endif
+#endif
+
+
   /* XXX: fix ecommunity_parse to use stream API */
   stream_forward_getp (peer->ibuf, length);
 
@@ -1723,6 +1794,7 @@ bgp_attr_ext_communities (struct bgp_attr_parser_args *args)
   return BGP_ATTR_PARSE_PROCEED;
 }
 
+
 /* BGP unknown attribute treatment. */
 static bgp_attr_parse_ret_t
 bgp_attr_unknown (struct bgp_attr_parser_args *args)
@@ -2708,6 +2780,12 @@ bgp_packet_attribute (struct bgp *bgp, struct peer *peer,
       stream_putc_at (s, sizep, (stream_get_endp (s) - sizep) - 1);
     }
 
+
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+  unsigned long pos_eval;
+#endif
+#endif
   /* Extended Communities attribute. */
   if (CHECK_FLAG (peer->af_flags[afi][safi], PEER_FLAG_SEND_EXT_COMMUNITY)
       && (attr->flag & ATTR_FLAG_BIT (BGP_ATTR_EXT_COMMUNITIES)))
@@ -2716,6 +2794,29 @@ bgp_packet_attribute (struct bgp *bgp, struct peer *peer,
 
       assert (attre);
 
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+      /* change ecommunity value for time-measure purpose.
+       * And later return the origianl pointer
+       */
+      struct ecommunity *ecom_orig=NULL;
+      struct ecommunity *old_ecom, *new_ecom;
+      struct ecommunity_val eval;
+
+      old_ecom = attre->ecommunity;
+      new_ecom = ecommunity_dup (old_ecom);
+
+      /* the reasone commented out: need to use dummy first */
+      memcpy(eval.val, &peer->local_as, 2);
+      memset(&eval.val[2], 0xff, 6); // in order to advance than other ecomm values
+      //eval = srx_gettime(peer->local_as);
+
+      if( call_ecommunity_add_val (new_ecom, &eval))
+      {
+        attre->ecommunity = new_ecom;
+      }
+#endif
+#endif
       if (peer->sort == BGP_PEER_IBGP
           || peer->sort == BGP_PEER_CONFED)
 	{
@@ -2788,10 +2889,29 @@ bgp_packet_attribute (struct bgp *bgp, struct peer *peer,
                   if (CHECK_FLAG (tbit, ECOMMUNITY_FLAG_NON_TRANSITIVE))
                     continue;
 #endif
+
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+                  pos_eval = stream_get_endp (s);
+#endif
+#endif
 		  stream_put (s, pnt, 8);
 		}
 	    }
 	}
+
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+      // return back the origianl value to attr
+      if(attre->ecommunity != old_ecom)
+        attre->ecommunity = old_ecom;
+
+      // release the previous temp instance
+      if(new_ecom)
+        ecommunity_free (&new_ecom);
+#endif
+#endif
+
     }
 
   if ( send_as4_path )
@@ -2929,6 +3049,37 @@ bgp_packet_attribute (struct bgp *bgp, struct peer *peer,
 
 #endif /* USE_SRX */
 
+#ifdef USE_SRX
+#ifdef TIME_MEASURE_TEST_ENABLED
+  struct ecommunity_val eval;
+  volatile uint64_t tmpq =0;
+  int i=0;
+  eval = srx_gettime(peer->local_as);
+
+
+  printf("------ eval: 0x");
+  for(i=0; i< ECOMMUNITY_SIZE; i++)
+    printf("%02x ", eval.val[i] & 0xFF);
+  printf("\n");
+
+  tmpq |= (uint64_t) (eval.val[0] & 0xFF) << 56;
+  tmpq |= (uint64_t) (eval.val[1] & 0xFF) << 48;
+  tmpq |= (uint64_t) (eval.val[2] & 0xFF) << 40;
+  tmpq |= (uint64_t) (eval.val[3] & 0xFF) << 32;
+  tmpq |= (uint64_t) (eval.val[4] & 0xFF) << 24;
+  tmpq |= (uint64_t) (eval.val[5] & 0xFF) << 16;
+  tmpq |= (uint64_t) (eval.val[6] & 0xFF) << 8;
+  tmpq |= (uint64_t) (eval.val[7] & 0xFF);
+
+  stream_putq_at (s, pos_eval, tmpq); // replace
+
+  printf(" ------ pos(s): %d tmpq: %16x \n", pos_eval, (uint64_t) tmpq);
+  printf(" ------ s->data : 0x");
+  for(i=0; i< ECOMMUNITY_SIZE; i++)
+    printf("%02x ", s->data[pos_eval + i]);
+  printf("\n");
+#endif
+#endif
   /* Unknown transit attribute. */
   if (attr->extra && attr->extra->transit)
     stream_put (s, attr->extra->transit->val, attr->extra->transit->length);
diff --git a/quaggasrx/bgpd/bgp_ecommunity.c b/quaggasrx/bgpd/bgp_ecommunity.c
index 49fc6d5..85bdebd 100644
--- a/quaggasrx/bgpd/bgp_ecommunity.c
+++ b/quaggasrx/bgpd/bgp_ecommunity.c
@@ -594,6 +594,12 @@ ecommunity_bgpsec_str2com(int type, unsigned int state_value)
 
   return ecom;
 }
+
+/* wrapper function to call ecommunity_add_val from outside */
+int call_ecommunity_add_val (struct ecommunity *ecom, struct ecommunity_val *eval)
+{
+  return ecommunity_add_val (ecom, eval);
+}
 #endif
 
 /* Convert extended community attribute to string.
diff --git a/quaggasrx/bgpd/bgp_ecommunity.h b/quaggasrx/bgpd/bgp_ecommunity.h
index 9b6c6e2..06e10c4 100644
--- a/quaggasrx/bgpd/bgp_ecommunity.h
+++ b/quaggasrx/bgpd/bgp_ecommunity.h
@@ -94,6 +94,7 @@ extern unsigned int ecommunity_hash_make (void *);
 extern struct ecommunity *ecommunity_str2com (const char *, int, int);
 #ifdef USE_SRX
 extern struct ecommunity *ecommunity_bgpsec_str2com(int, unsigned int);
+int call_ecommunity_add_val (struct ecommunity *, struct ecommunity_val *);
 #endif
 extern char *ecommunity_ecom2str (struct ecommunity *, int);
 extern int ecommunity_match (const struct ecommunity *, const struct ecommunity *);
diff --git a/quaggasrx/bgpd/bgp_packet.c b/quaggasrx/bgpd/bgp_packet.c
index f5409ff..a03b0c9 100644
--- a/quaggasrx/bgpd/bgp_packet.c
+++ b/quaggasrx/bgpd/bgp_packet.c
@@ -158,13 +158,15 @@ struct ecommunity* srxEcommunityChange(struct bgp *bgp, struct attr *attr, struc
 
   if(attre)
   {
+    ecom_orig = ecom = attre->ecommunity;
+    if(!ecom)
+    {
     ecom = ecommunity_bgpsec_str2com (bgp->srx_ecommunity_subcode, state);
-    attr->flag |= ATTR_FLAG_BIT (BGP_ATTR_EXT_COMMUNITIES);
-    ecom_orig = attre->ecommunity;
     attre->ecommunity = ecom;
+      ecom_orig = NULL;
+    }
+    attr->flag |= ATTR_FLAG_BIT (BGP_ATTR_EXT_COMMUNITIES);
   }
-  else
-    return NULL;
 
   return ecom_orig;
 }
@@ -175,6 +177,8 @@ int srxEcommunityRestore(struct attr *attr, struct ecommunity* ecom_orig)
   struct ecommunity *ecom=NULL;
   int ret=0;
 
+  if(ecom_orig == NULL)
+  {
   if(attre && attre->ecommunity && (attr->flag & ATTR_FLAG_BIT (BGP_ATTR_EXT_COMMUNITIES)))
   {
     attr->flag &= ~(ATTR_FLAG_BIT (BGP_ATTR_EXT_COMMUNITIES));
@@ -182,6 +186,7 @@ int srxEcommunityRestore(struct attr *attr, struct ecommunity* ecom_orig)
     attre->ecommunity = ecom_orig;
     ret = 1;
   }
+  }
 
   if(ecom)
     free(ecom);
@@ -830,8 +835,10 @@ bgp_write (struct thread *thread)
 	  peer->update_out++;
 #ifdef USE_SRX
           sockopt_cork (peer->fd, 0);
+#if 0
           if (BGP_DEBUG (bgpsec, BGPSEC_DETAIL))
             zlog_debug("[BGPSEC] update packet couter: %d", count);
+#endif
           //
           // TODO: considering 'count' option if update  msg exceeds the bound
           //
